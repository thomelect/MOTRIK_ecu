
MOTRIK_ecu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003640  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08003810  08003810  00013810  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003878  08003878  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003878  08003878  00013878  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003880  08003880  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003880  08003880  00013880  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003884  08003884  00013884  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003888  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d0  20000070  080038f8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000140  080038f8  00020140  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a12a  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000174a  00000000  00000000  0002a1ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000888  00000000  00000000  0002b918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007f0  00000000  00000000  0002c1a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002184a  00000000  00000000  0002c990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ac4b  00000000  00000000  0004e1da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ca82f  00000000  00000000  00058e25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00123654  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002664  00000000  00000000  001236a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080037f8 	.word	0x080037f8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	080037f8 	.word	0x080037f8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b094      	sub	sp, #80	; 0x50
 80005b8:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80005ba:	f000 faab 	bl	8000b14 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80005be:	f000 f84d 	bl	800065c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80005c2:	f000 f90b 	bl	80007dc <MX_GPIO_Init>
	MX_SPI1_Init();
 80005c6:	f000 f8a9 	bl	800071c <MX_SPI1_Init>
	MX_USART2_UART_Init();
 80005ca:	f000 f8dd 	bl	8000788 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */

	// CS pin niveau bas.
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET); // Chip Select à 0.
 80005ce:	2201      	movs	r2, #1
 80005d0:	2140      	movs	r1, #64	; 0x40
 80005d2:	481d      	ldr	r0, [pc, #116]	; (8000648 <main+0x94>)
 80005d4:	f000 fd8a 	bl	80010ec <HAL_GPIO_WritePin>

	// Test USART.
	usart_buf_len = sprintf(usart_buf, "SPI TEST\n\r");
 80005d8:	f107 0318 	add.w	r3, r7, #24
 80005dc:	491b      	ldr	r1, [pc, #108]	; (800064c <main+0x98>)
 80005de:	4618      	mov	r0, r3
 80005e0:	f002 fc9c 	bl	8002f1c <siprintf>
 80005e4:	64f8      	str	r0, [r7, #76]	; 0x4c
	HAL_UART_Transmit(&huart2, (uint8_t *)usart_buf, usart_buf_len, 100);
 80005e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80005e8:	b29a      	uxth	r2, r3
 80005ea:	f107 0118 	add.w	r1, r7, #24
 80005ee:	2364      	movs	r3, #100	; 0x64
 80005f0:	4817      	ldr	r0, [pc, #92]	; (8000650 <main+0x9c>)
 80005f2:	f002 f8ec 	bl	80027ce <HAL_UART_Transmit>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET); // Chip Select à 0.
	HAL_SPI_Transmit(&hspi1, (uint8_t *)(REG_CONFIG1 | REG_READ | PFD), 4, 100);
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET); // Chip Select à 0.
	*/

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET); // Chip Select à 0.
 80005f6:	2201      	movs	r2, #1
 80005f8:	2140      	movs	r1, #64	; 0x40
 80005fa:	4813      	ldr	r0, [pc, #76]	; (8000648 <main+0x94>)
 80005fc:	f000 fd76 	bl	80010ec <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)(REG_CONFIG4 | REG_READ | SS3), 4, 100);
 8000600:	2364      	movs	r3, #100	; 0x64
 8000602:	2204      	movs	r2, #4
 8000604:	f248 0103 	movw	r1, #32771	; 0x8003
 8000608:	4812      	ldr	r0, [pc, #72]	; (8000654 <main+0xa0>)
 800060a:	f001 fb74 	bl	8001cf6 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, (uint8_t *)spi_buf, 1, 100);
 800060e:	1d39      	adds	r1, r7, #4
 8000610:	2364      	movs	r3, #100	; 0x64
 8000612:	2201      	movs	r2, #1
 8000614:	480f      	ldr	r0, [pc, #60]	; (8000654 <main+0xa0>)
 8000616:	f001 fcaa 	bl	8001f6e <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET); // Chip Select à 0.
 800061a:	2200      	movs	r2, #0
 800061c:	2140      	movs	r1, #64	; 0x40
 800061e:	480a      	ldr	r0, [pc, #40]	; (8000648 <main+0x94>)
 8000620:	f000 fd64 	bl	80010ec <HAL_GPIO_WritePin>

	// Affichage de la réponse sur USART.
	usart_buf_len = sprintf(usart_buf, "Status 0x%02x\n\r", (unsigned int)spi_buf[0]);
 8000624:	793b      	ldrb	r3, [r7, #4]
 8000626:	461a      	mov	r2, r3
 8000628:	f107 0318 	add.w	r3, r7, #24
 800062c:	490a      	ldr	r1, [pc, #40]	; (8000658 <main+0xa4>)
 800062e:	4618      	mov	r0, r3
 8000630:	f002 fc74 	bl	8002f1c <siprintf>
 8000634:	64f8      	str	r0, [r7, #76]	; 0x4c
	HAL_UART_Transmit(&huart2, (uint8_t *)usart_buf, usart_buf_len, 100);
 8000636:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000638:	b29a      	uxth	r2, r3
 800063a:	f107 0118 	add.w	r1, r7, #24
 800063e:	2364      	movs	r3, #100	; 0x64
 8000640:	4803      	ldr	r0, [pc, #12]	; (8000650 <main+0x9c>)
 8000642:	f002 f8c4 	bl	80027ce <HAL_UART_Transmit>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8000646:	e7fe      	b.n	8000646 <main+0x92>
 8000648:	40020400 	.word	0x40020400
 800064c:	08003810 	.word	0x08003810
 8000650:	200000e4 	.word	0x200000e4
 8000654:	2000008c 	.word	0x2000008c
 8000658:	0800381c 	.word	0x0800381c

0800065c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b094      	sub	sp, #80	; 0x50
 8000660:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000662:	f107 031c 	add.w	r3, r7, #28
 8000666:	2234      	movs	r2, #52	; 0x34
 8000668:	2100      	movs	r1, #0
 800066a:	4618      	mov	r0, r3
 800066c:	f002 fc4e 	bl	8002f0c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000670:	f107 0308 	add.w	r3, r7, #8
 8000674:	2200      	movs	r2, #0
 8000676:	601a      	str	r2, [r3, #0]
 8000678:	605a      	str	r2, [r3, #4]
 800067a:	609a      	str	r2, [r3, #8]
 800067c:	60da      	str	r2, [r3, #12]
 800067e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
  */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000680:	2300      	movs	r3, #0
 8000682:	607b      	str	r3, [r7, #4]
 8000684:	4b23      	ldr	r3, [pc, #140]	; (8000714 <SystemClock_Config+0xb8>)
 8000686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000688:	4a22      	ldr	r2, [pc, #136]	; (8000714 <SystemClock_Config+0xb8>)
 800068a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800068e:	6413      	str	r3, [r2, #64]	; 0x40
 8000690:	4b20      	ldr	r3, [pc, #128]	; (8000714 <SystemClock_Config+0xb8>)
 8000692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000694:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000698:	607b      	str	r3, [r7, #4]
 800069a:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800069c:	2300      	movs	r3, #0
 800069e:	603b      	str	r3, [r7, #0]
 80006a0:	4b1d      	ldr	r3, [pc, #116]	; (8000718 <SystemClock_Config+0xbc>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006a8:	4a1b      	ldr	r2, [pc, #108]	; (8000718 <SystemClock_Config+0xbc>)
 80006aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006ae:	6013      	str	r3, [r2, #0]
 80006b0:	4b19      	ldr	r3, [pc, #100]	; (8000718 <SystemClock_Config+0xbc>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006b8:	603b      	str	r3, [r7, #0]
 80006ba:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006bc:	2302      	movs	r3, #2
 80006be:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006c0:	2301      	movs	r3, #1
 80006c2:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006c4:	2310      	movs	r3, #16
 80006c6:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006c8:	2300      	movs	r3, #0
 80006ca:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006cc:	f107 031c 	add.w	r3, r7, #28
 80006d0:	4618      	mov	r0, r3
 80006d2:	f000 ffe9 	bl	80016a8 <HAL_RCC_OscConfig>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <SystemClock_Config+0x84>
	{
		Error_Handler();
 80006dc:	f000 f8c0 	bl	8000860 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
  */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80006e0:	230f      	movs	r3, #15
 80006e2:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006e4:	2300      	movs	r3, #0
 80006e6:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e8:	2300      	movs	r3, #0
 80006ea:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006ec:	2300      	movs	r3, #0
 80006ee:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006f0:	2300      	movs	r3, #0
 80006f2:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006f4:	f107 0308 	add.w	r3, r7, #8
 80006f8:	2100      	movs	r1, #0
 80006fa:	4618      	mov	r0, r3
 80006fc:	f000 fd10 	bl	8001120 <HAL_RCC_ClockConfig>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <SystemClock_Config+0xae>
	{
		Error_Handler();
 8000706:	f000 f8ab 	bl	8000860 <Error_Handler>
	}
}
 800070a:	bf00      	nop
 800070c:	3750      	adds	r7, #80	; 0x50
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	40023800 	.word	0x40023800
 8000718:	40007000 	.word	0x40007000

0800071c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8000720:	4b17      	ldr	r3, [pc, #92]	; (8000780 <MX_SPI1_Init+0x64>)
 8000722:	4a18      	ldr	r2, [pc, #96]	; (8000784 <MX_SPI1_Init+0x68>)
 8000724:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8000726:	4b16      	ldr	r3, [pc, #88]	; (8000780 <MX_SPI1_Init+0x64>)
 8000728:	f44f 7282 	mov.w	r2, #260	; 0x104
 800072c:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800072e:	4b14      	ldr	r3, [pc, #80]	; (8000780 <MX_SPI1_Init+0x64>)
 8000730:	2200      	movs	r2, #0
 8000732:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000734:	4b12      	ldr	r3, [pc, #72]	; (8000780 <MX_SPI1_Init+0x64>)
 8000736:	2200      	movs	r2, #0
 8000738:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800073a:	4b11      	ldr	r3, [pc, #68]	; (8000780 <MX_SPI1_Init+0x64>)
 800073c:	2200      	movs	r2, #0
 800073e:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000740:	4b0f      	ldr	r3, [pc, #60]	; (8000780 <MX_SPI1_Init+0x64>)
 8000742:	2200      	movs	r2, #0
 8000744:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8000746:	4b0e      	ldr	r3, [pc, #56]	; (8000780 <MX_SPI1_Init+0x64>)
 8000748:	f44f 7200 	mov.w	r2, #512	; 0x200
 800074c:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800074e:	4b0c      	ldr	r3, [pc, #48]	; (8000780 <MX_SPI1_Init+0x64>)
 8000750:	2218      	movs	r2, #24
 8000752:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000754:	4b0a      	ldr	r3, [pc, #40]	; (8000780 <MX_SPI1_Init+0x64>)
 8000756:	2200      	movs	r2, #0
 8000758:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800075a:	4b09      	ldr	r3, [pc, #36]	; (8000780 <MX_SPI1_Init+0x64>)
 800075c:	2200      	movs	r2, #0
 800075e:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000760:	4b07      	ldr	r3, [pc, #28]	; (8000780 <MX_SPI1_Init+0x64>)
 8000762:	2200      	movs	r2, #0
 8000764:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 8000766:	4b06      	ldr	r3, [pc, #24]	; (8000780 <MX_SPI1_Init+0x64>)
 8000768:	220a      	movs	r2, #10
 800076a:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800076c:	4804      	ldr	r0, [pc, #16]	; (8000780 <MX_SPI1_Init+0x64>)
 800076e:	f001 fa39 	bl	8001be4 <HAL_SPI_Init>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <MX_SPI1_Init+0x60>
	{
		Error_Handler();
 8000778:	f000 f872 	bl	8000860 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */
}
 800077c:	bf00      	nop
 800077e:	bd80      	pop	{r7, pc}
 8000780:	2000008c 	.word	0x2000008c
 8000784:	40013000 	.word	0x40013000

08000788 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 800078c:	4b11      	ldr	r3, [pc, #68]	; (80007d4 <MX_USART2_UART_Init+0x4c>)
 800078e:	4a12      	ldr	r2, [pc, #72]	; (80007d8 <MX_USART2_UART_Init+0x50>)
 8000790:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000792:	4b10      	ldr	r3, [pc, #64]	; (80007d4 <MX_USART2_UART_Init+0x4c>)
 8000794:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000798:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800079a:	4b0e      	ldr	r3, [pc, #56]	; (80007d4 <MX_USART2_UART_Init+0x4c>)
 800079c:	2200      	movs	r2, #0
 800079e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80007a0:	4b0c      	ldr	r3, [pc, #48]	; (80007d4 <MX_USART2_UART_Init+0x4c>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80007a6:	4b0b      	ldr	r3, [pc, #44]	; (80007d4 <MX_USART2_UART_Init+0x4c>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80007ac:	4b09      	ldr	r3, [pc, #36]	; (80007d4 <MX_USART2_UART_Init+0x4c>)
 80007ae:	220c      	movs	r2, #12
 80007b0:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007b2:	4b08      	ldr	r3, [pc, #32]	; (80007d4 <MX_USART2_UART_Init+0x4c>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007b8:	4b06      	ldr	r3, [pc, #24]	; (80007d4 <MX_USART2_UART_Init+0x4c>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 80007be:	4805      	ldr	r0, [pc, #20]	; (80007d4 <MX_USART2_UART_Init+0x4c>)
 80007c0:	f001 ffb8 	bl	8002734 <HAL_UART_Init>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <MX_USART2_UART_Init+0x46>
	{
		Error_Handler();
 80007ca:	f000 f849 	bl	8000860 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */
}
 80007ce:	bf00      	nop
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	200000e4 	.word	0x200000e4
 80007d8:	40004400 	.word	0x40004400

080007dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b088      	sub	sp, #32
 80007e0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e2:	f107 030c 	add.w	r3, r7, #12
 80007e6:	2200      	movs	r2, #0
 80007e8:	601a      	str	r2, [r3, #0]
 80007ea:	605a      	str	r2, [r3, #4]
 80007ec:	609a      	str	r2, [r3, #8]
 80007ee:	60da      	str	r2, [r3, #12]
 80007f0:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	60bb      	str	r3, [r7, #8]
 80007f6:	4b18      	ldr	r3, [pc, #96]	; (8000858 <MX_GPIO_Init+0x7c>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	4a17      	ldr	r2, [pc, #92]	; (8000858 <MX_GPIO_Init+0x7c>)
 80007fc:	f043 0301 	orr.w	r3, r3, #1
 8000800:	6313      	str	r3, [r2, #48]	; 0x30
 8000802:	4b15      	ldr	r3, [pc, #84]	; (8000858 <MX_GPIO_Init+0x7c>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	f003 0301 	and.w	r3, r3, #1
 800080a:	60bb      	str	r3, [r7, #8]
 800080c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	607b      	str	r3, [r7, #4]
 8000812:	4b11      	ldr	r3, [pc, #68]	; (8000858 <MX_GPIO_Init+0x7c>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	4a10      	ldr	r2, [pc, #64]	; (8000858 <MX_GPIO_Init+0x7c>)
 8000818:	f043 0302 	orr.w	r3, r3, #2
 800081c:	6313      	str	r3, [r2, #48]	; 0x30
 800081e:	4b0e      	ldr	r3, [pc, #56]	; (8000858 <MX_GPIO_Init+0x7c>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	f003 0302 	and.w	r3, r3, #2
 8000826:	607b      	str	r3, [r7, #4]
 8000828:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 800082a:	2200      	movs	r2, #0
 800082c:	2140      	movs	r1, #64	; 0x40
 800082e:	480b      	ldr	r0, [pc, #44]	; (800085c <MX_GPIO_Init+0x80>)
 8000830:	f000 fc5c 	bl	80010ec <HAL_GPIO_WritePin>

	/*Configure GPIO pin : SPI1_CS_Pin */
	GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8000834:	2340      	movs	r3, #64	; 0x40
 8000836:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000838:	2301      	movs	r3, #1
 800083a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083c:	2300      	movs	r3, #0
 800083e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000840:	2300      	movs	r3, #0
 8000842:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8000844:	f107 030c 	add.w	r3, r7, #12
 8000848:	4619      	mov	r1, r3
 800084a:	4804      	ldr	r0, [pc, #16]	; (800085c <MX_GPIO_Init+0x80>)
 800084c:	f000 faba 	bl	8000dc4 <HAL_GPIO_Init>
}
 8000850:	bf00      	nop
 8000852:	3720      	adds	r7, #32
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	40023800 	.word	0x40023800
 800085c:	40020400 	.word	0x40020400

08000860 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000864:	b672      	cpsid	i
}
 8000866:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000868:	e7fe      	b.n	8000868 <Error_Handler+0x8>
	...

0800086c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800086c:	b480      	push	{r7}
 800086e:	b083      	sub	sp, #12
 8000870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000872:	2300      	movs	r3, #0
 8000874:	607b      	str	r3, [r7, #4]
 8000876:	4b10      	ldr	r3, [pc, #64]	; (80008b8 <HAL_MspInit+0x4c>)
 8000878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800087a:	4a0f      	ldr	r2, [pc, #60]	; (80008b8 <HAL_MspInit+0x4c>)
 800087c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000880:	6453      	str	r3, [r2, #68]	; 0x44
 8000882:	4b0d      	ldr	r3, [pc, #52]	; (80008b8 <HAL_MspInit+0x4c>)
 8000884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000886:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800088a:	607b      	str	r3, [r7, #4]
 800088c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800088e:	2300      	movs	r3, #0
 8000890:	603b      	str	r3, [r7, #0]
 8000892:	4b09      	ldr	r3, [pc, #36]	; (80008b8 <HAL_MspInit+0x4c>)
 8000894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000896:	4a08      	ldr	r2, [pc, #32]	; (80008b8 <HAL_MspInit+0x4c>)
 8000898:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800089c:	6413      	str	r3, [r2, #64]	; 0x40
 800089e:	4b06      	ldr	r3, [pc, #24]	; (80008b8 <HAL_MspInit+0x4c>)
 80008a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008a6:	603b      	str	r3, [r7, #0]
 80008a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008aa:	bf00      	nop
 80008ac:	370c      	adds	r7, #12
 80008ae:	46bd      	mov	sp, r7
 80008b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b4:	4770      	bx	lr
 80008b6:	bf00      	nop
 80008b8:	40023800 	.word	0x40023800

080008bc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b08a      	sub	sp, #40	; 0x28
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c4:	f107 0314 	add.w	r3, r7, #20
 80008c8:	2200      	movs	r2, #0
 80008ca:	601a      	str	r2, [r3, #0]
 80008cc:	605a      	str	r2, [r3, #4]
 80008ce:	609a      	str	r2, [r3, #8]
 80008d0:	60da      	str	r2, [r3, #12]
 80008d2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4a19      	ldr	r2, [pc, #100]	; (8000940 <HAL_SPI_MspInit+0x84>)
 80008da:	4293      	cmp	r3, r2
 80008dc:	d12b      	bne.n	8000936 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80008de:	2300      	movs	r3, #0
 80008e0:	613b      	str	r3, [r7, #16]
 80008e2:	4b18      	ldr	r3, [pc, #96]	; (8000944 <HAL_SPI_MspInit+0x88>)
 80008e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008e6:	4a17      	ldr	r2, [pc, #92]	; (8000944 <HAL_SPI_MspInit+0x88>)
 80008e8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80008ec:	6453      	str	r3, [r2, #68]	; 0x44
 80008ee:	4b15      	ldr	r3, [pc, #84]	; (8000944 <HAL_SPI_MspInit+0x88>)
 80008f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80008f6:	613b      	str	r3, [r7, #16]
 80008f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	60fb      	str	r3, [r7, #12]
 80008fe:	4b11      	ldr	r3, [pc, #68]	; (8000944 <HAL_SPI_MspInit+0x88>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	4a10      	ldr	r2, [pc, #64]	; (8000944 <HAL_SPI_MspInit+0x88>)
 8000904:	f043 0301 	orr.w	r3, r3, #1
 8000908:	6313      	str	r3, [r2, #48]	; 0x30
 800090a:	4b0e      	ldr	r3, [pc, #56]	; (8000944 <HAL_SPI_MspInit+0x88>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	f003 0301 	and.w	r3, r3, #1
 8000912:	60fb      	str	r3, [r7, #12]
 8000914:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000916:	23e0      	movs	r3, #224	; 0xe0
 8000918:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800091a:	2302      	movs	r3, #2
 800091c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091e:	2300      	movs	r3, #0
 8000920:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000922:	2303      	movs	r3, #3
 8000924:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000926:	2305      	movs	r3, #5
 8000928:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800092a:	f107 0314 	add.w	r3, r7, #20
 800092e:	4619      	mov	r1, r3
 8000930:	4805      	ldr	r0, [pc, #20]	; (8000948 <HAL_SPI_MspInit+0x8c>)
 8000932:	f000 fa47 	bl	8000dc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000936:	bf00      	nop
 8000938:	3728      	adds	r7, #40	; 0x28
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	40013000 	.word	0x40013000
 8000944:	40023800 	.word	0x40023800
 8000948:	40020000 	.word	0x40020000

0800094c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b08a      	sub	sp, #40	; 0x28
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000954:	f107 0314 	add.w	r3, r7, #20
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	609a      	str	r2, [r3, #8]
 8000960:	60da      	str	r2, [r3, #12]
 8000962:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a19      	ldr	r2, [pc, #100]	; (80009d0 <HAL_UART_MspInit+0x84>)
 800096a:	4293      	cmp	r3, r2
 800096c:	d12b      	bne.n	80009c6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	613b      	str	r3, [r7, #16]
 8000972:	4b18      	ldr	r3, [pc, #96]	; (80009d4 <HAL_UART_MspInit+0x88>)
 8000974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000976:	4a17      	ldr	r2, [pc, #92]	; (80009d4 <HAL_UART_MspInit+0x88>)
 8000978:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800097c:	6413      	str	r3, [r2, #64]	; 0x40
 800097e:	4b15      	ldr	r3, [pc, #84]	; (80009d4 <HAL_UART_MspInit+0x88>)
 8000980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000982:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000986:	613b      	str	r3, [r7, #16]
 8000988:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800098a:	2300      	movs	r3, #0
 800098c:	60fb      	str	r3, [r7, #12]
 800098e:	4b11      	ldr	r3, [pc, #68]	; (80009d4 <HAL_UART_MspInit+0x88>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	4a10      	ldr	r2, [pc, #64]	; (80009d4 <HAL_UART_MspInit+0x88>)
 8000994:	f043 0301 	orr.w	r3, r3, #1
 8000998:	6313      	str	r3, [r2, #48]	; 0x30
 800099a:	4b0e      	ldr	r3, [pc, #56]	; (80009d4 <HAL_UART_MspInit+0x88>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	f003 0301 	and.w	r3, r3, #1
 80009a2:	60fb      	str	r3, [r7, #12]
 80009a4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80009a6:	230c      	movs	r3, #12
 80009a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009aa:	2302      	movs	r3, #2
 80009ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ae:	2300      	movs	r3, #0
 80009b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009b2:	2303      	movs	r3, #3
 80009b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009b6:	2307      	movs	r3, #7
 80009b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ba:	f107 0314 	add.w	r3, r7, #20
 80009be:	4619      	mov	r1, r3
 80009c0:	4805      	ldr	r0, [pc, #20]	; (80009d8 <HAL_UART_MspInit+0x8c>)
 80009c2:	f000 f9ff 	bl	8000dc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009c6:	bf00      	nop
 80009c8:	3728      	adds	r7, #40	; 0x28
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	40004400 	.word	0x40004400
 80009d4:	40023800 	.word	0x40023800
 80009d8:	40020000 	.word	0x40020000

080009dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009e0:	e7fe      	b.n	80009e0 <NMI_Handler+0x4>

080009e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009e2:	b480      	push	{r7}
 80009e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009e6:	e7fe      	b.n	80009e6 <HardFault_Handler+0x4>

080009e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009ec:	e7fe      	b.n	80009ec <MemManage_Handler+0x4>

080009ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009ee:	b480      	push	{r7}
 80009f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009f2:	e7fe      	b.n	80009f2 <BusFault_Handler+0x4>

080009f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009f8:	e7fe      	b.n	80009f8 <UsageFault_Handler+0x4>

080009fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009fa:	b480      	push	{r7}
 80009fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009fe:	bf00      	nop
 8000a00:	46bd      	mov	sp, r7
 8000a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a06:	4770      	bx	lr

08000a08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a0c:	bf00      	nop
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr

08000a16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a16:	b480      	push	{r7}
 8000a18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a1a:	bf00      	nop
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a22:	4770      	bx	lr

08000a24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a28:	f000 f8c6 	bl	8000bb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a2c:	bf00      	nop
 8000a2e:	bd80      	pop	{r7, pc}

08000a30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b086      	sub	sp, #24
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a38:	4a14      	ldr	r2, [pc, #80]	; (8000a8c <_sbrk+0x5c>)
 8000a3a:	4b15      	ldr	r3, [pc, #84]	; (8000a90 <_sbrk+0x60>)
 8000a3c:	1ad3      	subs	r3, r2, r3
 8000a3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a40:	697b      	ldr	r3, [r7, #20]
 8000a42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a44:	4b13      	ldr	r3, [pc, #76]	; (8000a94 <_sbrk+0x64>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d102      	bne.n	8000a52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a4c:	4b11      	ldr	r3, [pc, #68]	; (8000a94 <_sbrk+0x64>)
 8000a4e:	4a12      	ldr	r2, [pc, #72]	; (8000a98 <_sbrk+0x68>)
 8000a50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a52:	4b10      	ldr	r3, [pc, #64]	; (8000a94 <_sbrk+0x64>)
 8000a54:	681a      	ldr	r2, [r3, #0]
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	4413      	add	r3, r2
 8000a5a:	693a      	ldr	r2, [r7, #16]
 8000a5c:	429a      	cmp	r2, r3
 8000a5e:	d207      	bcs.n	8000a70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a60:	f002 fa2a 	bl	8002eb8 <__errno>
 8000a64:	4603      	mov	r3, r0
 8000a66:	220c      	movs	r2, #12
 8000a68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a6e:	e009      	b.n	8000a84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a70:	4b08      	ldr	r3, [pc, #32]	; (8000a94 <_sbrk+0x64>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a76:	4b07      	ldr	r3, [pc, #28]	; (8000a94 <_sbrk+0x64>)
 8000a78:	681a      	ldr	r2, [r3, #0]
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	4413      	add	r3, r2
 8000a7e:	4a05      	ldr	r2, [pc, #20]	; (8000a94 <_sbrk+0x64>)
 8000a80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a82:	68fb      	ldr	r3, [r7, #12]
}
 8000a84:	4618      	mov	r0, r3
 8000a86:	3718      	adds	r7, #24
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	20020000 	.word	0x20020000
 8000a90:	00000400 	.word	0x00000400
 8000a94:	20000128 	.word	0x20000128
 8000a98:	20000140 	.word	0x20000140

08000a9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000aa0:	4b06      	ldr	r3, [pc, #24]	; (8000abc <SystemInit+0x20>)
 8000aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000aa6:	4a05      	ldr	r2, [pc, #20]	; (8000abc <SystemInit+0x20>)
 8000aa8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000aac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ab0:	bf00      	nop
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop
 8000abc:	e000ed00 	.word	0xe000ed00

08000ac0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ac0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000af8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ac4:	480d      	ldr	r0, [pc, #52]	; (8000afc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ac6:	490e      	ldr	r1, [pc, #56]	; (8000b00 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ac8:	4a0e      	ldr	r2, [pc, #56]	; (8000b04 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000aca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000acc:	e002      	b.n	8000ad4 <LoopCopyDataInit>

08000ace <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ace:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ad0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ad2:	3304      	adds	r3, #4

08000ad4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ad4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ad6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ad8:	d3f9      	bcc.n	8000ace <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ada:	4a0b      	ldr	r2, [pc, #44]	; (8000b08 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000adc:	4c0b      	ldr	r4, [pc, #44]	; (8000b0c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ade:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ae0:	e001      	b.n	8000ae6 <LoopFillZerobss>

08000ae2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ae2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ae4:	3204      	adds	r2, #4

08000ae6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ae6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ae8:	d3fb      	bcc.n	8000ae2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000aea:	f7ff ffd7 	bl	8000a9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000aee:	f002 f9e9 	bl	8002ec4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000af2:	f7ff fd5f 	bl	80005b4 <main>
  bx  lr    
 8000af6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000af8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000afc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b00:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000b04:	08003888 	.word	0x08003888
  ldr r2, =_sbss
 8000b08:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000b0c:	20000140 	.word	0x20000140

08000b10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b10:	e7fe      	b.n	8000b10 <ADC_IRQHandler>
	...

08000b14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b18:	4b0e      	ldr	r3, [pc, #56]	; (8000b54 <HAL_Init+0x40>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a0d      	ldr	r2, [pc, #52]	; (8000b54 <HAL_Init+0x40>)
 8000b1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b22:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b24:	4b0b      	ldr	r3, [pc, #44]	; (8000b54 <HAL_Init+0x40>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a0a      	ldr	r2, [pc, #40]	; (8000b54 <HAL_Init+0x40>)
 8000b2a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b2e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b30:	4b08      	ldr	r3, [pc, #32]	; (8000b54 <HAL_Init+0x40>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a07      	ldr	r2, [pc, #28]	; (8000b54 <HAL_Init+0x40>)
 8000b36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b3c:	2003      	movs	r0, #3
 8000b3e:	f000 f90d 	bl	8000d5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b42:	200f      	movs	r0, #15
 8000b44:	f000 f808 	bl	8000b58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b48:	f7ff fe90 	bl	800086c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b4c:	2300      	movs	r3, #0
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	40023c00 	.word	0x40023c00

08000b58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b60:	4b12      	ldr	r3, [pc, #72]	; (8000bac <HAL_InitTick+0x54>)
 8000b62:	681a      	ldr	r2, [r3, #0]
 8000b64:	4b12      	ldr	r3, [pc, #72]	; (8000bb0 <HAL_InitTick+0x58>)
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	4619      	mov	r1, r3
 8000b6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b72:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b76:	4618      	mov	r0, r3
 8000b78:	f000 f917 	bl	8000daa <HAL_SYSTICK_Config>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b82:	2301      	movs	r3, #1
 8000b84:	e00e      	b.n	8000ba4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	2b0f      	cmp	r3, #15
 8000b8a:	d80a      	bhi.n	8000ba2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	6879      	ldr	r1, [r7, #4]
 8000b90:	f04f 30ff 	mov.w	r0, #4294967295
 8000b94:	f000 f8ed 	bl	8000d72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b98:	4a06      	ldr	r2, [pc, #24]	; (8000bb4 <HAL_InitTick+0x5c>)
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	e000      	b.n	8000ba4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ba2:	2301      	movs	r3, #1
}
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	3708      	adds	r7, #8
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	20000000 	.word	0x20000000
 8000bb0:	20000008 	.word	0x20000008
 8000bb4:	20000004 	.word	0x20000004

08000bb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bbc:	4b06      	ldr	r3, [pc, #24]	; (8000bd8 <HAL_IncTick+0x20>)
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	461a      	mov	r2, r3
 8000bc2:	4b06      	ldr	r3, [pc, #24]	; (8000bdc <HAL_IncTick+0x24>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	4413      	add	r3, r2
 8000bc8:	4a04      	ldr	r2, [pc, #16]	; (8000bdc <HAL_IncTick+0x24>)
 8000bca:	6013      	str	r3, [r2, #0]
}
 8000bcc:	bf00      	nop
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	20000008 	.word	0x20000008
 8000bdc:	2000012c 	.word	0x2000012c

08000be0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  return uwTick;
 8000be4:	4b03      	ldr	r3, [pc, #12]	; (8000bf4 <HAL_GetTick+0x14>)
 8000be6:	681b      	ldr	r3, [r3, #0]
}
 8000be8:	4618      	mov	r0, r3
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	2000012c 	.word	0x2000012c

08000bf8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b085      	sub	sp, #20
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	f003 0307 	and.w	r3, r3, #7
 8000c06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c08:	4b0c      	ldr	r3, [pc, #48]	; (8000c3c <__NVIC_SetPriorityGrouping+0x44>)
 8000c0a:	68db      	ldr	r3, [r3, #12]
 8000c0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c0e:	68ba      	ldr	r2, [r7, #8]
 8000c10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c14:	4013      	ands	r3, r2
 8000c16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c1c:	68bb      	ldr	r3, [r7, #8]
 8000c1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c2a:	4a04      	ldr	r2, [pc, #16]	; (8000c3c <__NVIC_SetPriorityGrouping+0x44>)
 8000c2c:	68bb      	ldr	r3, [r7, #8]
 8000c2e:	60d3      	str	r3, [r2, #12]
}
 8000c30:	bf00      	nop
 8000c32:	3714      	adds	r7, #20
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr
 8000c3c:	e000ed00 	.word	0xe000ed00

08000c40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c44:	4b04      	ldr	r3, [pc, #16]	; (8000c58 <__NVIC_GetPriorityGrouping+0x18>)
 8000c46:	68db      	ldr	r3, [r3, #12]
 8000c48:	0a1b      	lsrs	r3, r3, #8
 8000c4a:	f003 0307 	and.w	r3, r3, #7
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr
 8000c58:	e000ed00 	.word	0xe000ed00

08000c5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	4603      	mov	r3, r0
 8000c64:	6039      	str	r1, [r7, #0]
 8000c66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	db0a      	blt.n	8000c86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	b2da      	uxtb	r2, r3
 8000c74:	490c      	ldr	r1, [pc, #48]	; (8000ca8 <__NVIC_SetPriority+0x4c>)
 8000c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c7a:	0112      	lsls	r2, r2, #4
 8000c7c:	b2d2      	uxtb	r2, r2
 8000c7e:	440b      	add	r3, r1
 8000c80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c84:	e00a      	b.n	8000c9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	b2da      	uxtb	r2, r3
 8000c8a:	4908      	ldr	r1, [pc, #32]	; (8000cac <__NVIC_SetPriority+0x50>)
 8000c8c:	79fb      	ldrb	r3, [r7, #7]
 8000c8e:	f003 030f 	and.w	r3, r3, #15
 8000c92:	3b04      	subs	r3, #4
 8000c94:	0112      	lsls	r2, r2, #4
 8000c96:	b2d2      	uxtb	r2, r2
 8000c98:	440b      	add	r3, r1
 8000c9a:	761a      	strb	r2, [r3, #24]
}
 8000c9c:	bf00      	nop
 8000c9e:	370c      	adds	r7, #12
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr
 8000ca8:	e000e100 	.word	0xe000e100
 8000cac:	e000ed00 	.word	0xe000ed00

08000cb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b089      	sub	sp, #36	; 0x24
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	60f8      	str	r0, [r7, #12]
 8000cb8:	60b9      	str	r1, [r7, #8]
 8000cba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	f003 0307 	and.w	r3, r3, #7
 8000cc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cc4:	69fb      	ldr	r3, [r7, #28]
 8000cc6:	f1c3 0307 	rsb	r3, r3, #7
 8000cca:	2b04      	cmp	r3, #4
 8000ccc:	bf28      	it	cs
 8000cce:	2304      	movcs	r3, #4
 8000cd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cd2:	69fb      	ldr	r3, [r7, #28]
 8000cd4:	3304      	adds	r3, #4
 8000cd6:	2b06      	cmp	r3, #6
 8000cd8:	d902      	bls.n	8000ce0 <NVIC_EncodePriority+0x30>
 8000cda:	69fb      	ldr	r3, [r7, #28]
 8000cdc:	3b03      	subs	r3, #3
 8000cde:	e000      	b.n	8000ce2 <NVIC_EncodePriority+0x32>
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ce4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ce8:	69bb      	ldr	r3, [r7, #24]
 8000cea:	fa02 f303 	lsl.w	r3, r2, r3
 8000cee:	43da      	mvns	r2, r3
 8000cf0:	68bb      	ldr	r3, [r7, #8]
 8000cf2:	401a      	ands	r2, r3
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cf8:	f04f 31ff 	mov.w	r1, #4294967295
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	fa01 f303 	lsl.w	r3, r1, r3
 8000d02:	43d9      	mvns	r1, r3
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d08:	4313      	orrs	r3, r2
         );
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	3724      	adds	r7, #36	; 0x24
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
	...

08000d18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	3b01      	subs	r3, #1
 8000d24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d28:	d301      	bcc.n	8000d2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	e00f      	b.n	8000d4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d2e:	4a0a      	ldr	r2, [pc, #40]	; (8000d58 <SysTick_Config+0x40>)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	3b01      	subs	r3, #1
 8000d34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d36:	210f      	movs	r1, #15
 8000d38:	f04f 30ff 	mov.w	r0, #4294967295
 8000d3c:	f7ff ff8e 	bl	8000c5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d40:	4b05      	ldr	r3, [pc, #20]	; (8000d58 <SysTick_Config+0x40>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d46:	4b04      	ldr	r3, [pc, #16]	; (8000d58 <SysTick_Config+0x40>)
 8000d48:	2207      	movs	r2, #7
 8000d4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d4c:	2300      	movs	r3, #0
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	3708      	adds	r7, #8
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	e000e010 	.word	0xe000e010

08000d5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d64:	6878      	ldr	r0, [r7, #4]
 8000d66:	f7ff ff47 	bl	8000bf8 <__NVIC_SetPriorityGrouping>
}
 8000d6a:	bf00      	nop
 8000d6c:	3708      	adds	r7, #8
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}

08000d72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d72:	b580      	push	{r7, lr}
 8000d74:	b086      	sub	sp, #24
 8000d76:	af00      	add	r7, sp, #0
 8000d78:	4603      	mov	r3, r0
 8000d7a:	60b9      	str	r1, [r7, #8]
 8000d7c:	607a      	str	r2, [r7, #4]
 8000d7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d80:	2300      	movs	r3, #0
 8000d82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d84:	f7ff ff5c 	bl	8000c40 <__NVIC_GetPriorityGrouping>
 8000d88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d8a:	687a      	ldr	r2, [r7, #4]
 8000d8c:	68b9      	ldr	r1, [r7, #8]
 8000d8e:	6978      	ldr	r0, [r7, #20]
 8000d90:	f7ff ff8e 	bl	8000cb0 <NVIC_EncodePriority>
 8000d94:	4602      	mov	r2, r0
 8000d96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d9a:	4611      	mov	r1, r2
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f7ff ff5d 	bl	8000c5c <__NVIC_SetPriority>
}
 8000da2:	bf00      	nop
 8000da4:	3718      	adds	r7, #24
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}

08000daa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000daa:	b580      	push	{r7, lr}
 8000dac:	b082      	sub	sp, #8
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000db2:	6878      	ldr	r0, [r7, #4]
 8000db4:	f7ff ffb0 	bl	8000d18 <SysTick_Config>
 8000db8:	4603      	mov	r3, r0
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	3708      	adds	r7, #8
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
	...

08000dc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b089      	sub	sp, #36	; 0x24
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
 8000dcc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000dda:	2300      	movs	r3, #0
 8000ddc:	61fb      	str	r3, [r7, #28]
 8000dde:	e165      	b.n	80010ac <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000de0:	2201      	movs	r2, #1
 8000de2:	69fb      	ldr	r3, [r7, #28]
 8000de4:	fa02 f303 	lsl.w	r3, r2, r3
 8000de8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	697a      	ldr	r2, [r7, #20]
 8000df0:	4013      	ands	r3, r2
 8000df2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000df4:	693a      	ldr	r2, [r7, #16]
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	429a      	cmp	r2, r3
 8000dfa:	f040 8154 	bne.w	80010a6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	f003 0303 	and.w	r3, r3, #3
 8000e06:	2b01      	cmp	r3, #1
 8000e08:	d005      	beq.n	8000e16 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e12:	2b02      	cmp	r3, #2
 8000e14:	d130      	bne.n	8000e78 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	689b      	ldr	r3, [r3, #8]
 8000e1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e1c:	69fb      	ldr	r3, [r7, #28]
 8000e1e:	005b      	lsls	r3, r3, #1
 8000e20:	2203      	movs	r2, #3
 8000e22:	fa02 f303 	lsl.w	r3, r2, r3
 8000e26:	43db      	mvns	r3, r3
 8000e28:	69ba      	ldr	r2, [r7, #24]
 8000e2a:	4013      	ands	r3, r2
 8000e2c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	68da      	ldr	r2, [r3, #12]
 8000e32:	69fb      	ldr	r3, [r7, #28]
 8000e34:	005b      	lsls	r3, r3, #1
 8000e36:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3a:	69ba      	ldr	r2, [r7, #24]
 8000e3c:	4313      	orrs	r3, r2
 8000e3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	69ba      	ldr	r2, [r7, #24]
 8000e44:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	fa02 f303 	lsl.w	r3, r2, r3
 8000e54:	43db      	mvns	r3, r3
 8000e56:	69ba      	ldr	r2, [r7, #24]
 8000e58:	4013      	ands	r3, r2
 8000e5a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	091b      	lsrs	r3, r3, #4
 8000e62:	f003 0201 	and.w	r2, r3, #1
 8000e66:	69fb      	ldr	r3, [r7, #28]
 8000e68:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6c:	69ba      	ldr	r2, [r7, #24]
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	69ba      	ldr	r2, [r7, #24]
 8000e76:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	f003 0303 	and.w	r3, r3, #3
 8000e80:	2b03      	cmp	r3, #3
 8000e82:	d017      	beq.n	8000eb4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	68db      	ldr	r3, [r3, #12]
 8000e88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e8a:	69fb      	ldr	r3, [r7, #28]
 8000e8c:	005b      	lsls	r3, r3, #1
 8000e8e:	2203      	movs	r2, #3
 8000e90:	fa02 f303 	lsl.w	r3, r2, r3
 8000e94:	43db      	mvns	r3, r3
 8000e96:	69ba      	ldr	r2, [r7, #24]
 8000e98:	4013      	ands	r3, r2
 8000e9a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	689a      	ldr	r2, [r3, #8]
 8000ea0:	69fb      	ldr	r3, [r7, #28]
 8000ea2:	005b      	lsls	r3, r3, #1
 8000ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea8:	69ba      	ldr	r2, [r7, #24]
 8000eaa:	4313      	orrs	r3, r2
 8000eac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	69ba      	ldr	r2, [r7, #24]
 8000eb2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	f003 0303 	and.w	r3, r3, #3
 8000ebc:	2b02      	cmp	r3, #2
 8000ebe:	d123      	bne.n	8000f08 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ec0:	69fb      	ldr	r3, [r7, #28]
 8000ec2:	08da      	lsrs	r2, r3, #3
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	3208      	adds	r2, #8
 8000ec8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ecc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	f003 0307 	and.w	r3, r3, #7
 8000ed4:	009b      	lsls	r3, r3, #2
 8000ed6:	220f      	movs	r2, #15
 8000ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8000edc:	43db      	mvns	r3, r3
 8000ede:	69ba      	ldr	r2, [r7, #24]
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	691a      	ldr	r2, [r3, #16]
 8000ee8:	69fb      	ldr	r3, [r7, #28]
 8000eea:	f003 0307 	and.w	r3, r3, #7
 8000eee:	009b      	lsls	r3, r3, #2
 8000ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef4:	69ba      	ldr	r2, [r7, #24]
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000efa:	69fb      	ldr	r3, [r7, #28]
 8000efc:	08da      	lsrs	r2, r3, #3
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	3208      	adds	r2, #8
 8000f02:	69b9      	ldr	r1, [r7, #24]
 8000f04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	005b      	lsls	r3, r3, #1
 8000f12:	2203      	movs	r2, #3
 8000f14:	fa02 f303 	lsl.w	r3, r2, r3
 8000f18:	43db      	mvns	r3, r3
 8000f1a:	69ba      	ldr	r2, [r7, #24]
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	f003 0203 	and.w	r2, r3, #3
 8000f28:	69fb      	ldr	r3, [r7, #28]
 8000f2a:	005b      	lsls	r3, r3, #1
 8000f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f30:	69ba      	ldr	r2, [r7, #24]
 8000f32:	4313      	orrs	r3, r2
 8000f34:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	69ba      	ldr	r2, [r7, #24]
 8000f3a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	f000 80ae 	beq.w	80010a6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	60fb      	str	r3, [r7, #12]
 8000f4e:	4b5d      	ldr	r3, [pc, #372]	; (80010c4 <HAL_GPIO_Init+0x300>)
 8000f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f52:	4a5c      	ldr	r2, [pc, #368]	; (80010c4 <HAL_GPIO_Init+0x300>)
 8000f54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f58:	6453      	str	r3, [r2, #68]	; 0x44
 8000f5a:	4b5a      	ldr	r3, [pc, #360]	; (80010c4 <HAL_GPIO_Init+0x300>)
 8000f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f62:	60fb      	str	r3, [r7, #12]
 8000f64:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f66:	4a58      	ldr	r2, [pc, #352]	; (80010c8 <HAL_GPIO_Init+0x304>)
 8000f68:	69fb      	ldr	r3, [r7, #28]
 8000f6a:	089b      	lsrs	r3, r3, #2
 8000f6c:	3302      	adds	r3, #2
 8000f6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f72:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f74:	69fb      	ldr	r3, [r7, #28]
 8000f76:	f003 0303 	and.w	r3, r3, #3
 8000f7a:	009b      	lsls	r3, r3, #2
 8000f7c:	220f      	movs	r2, #15
 8000f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f82:	43db      	mvns	r3, r3
 8000f84:	69ba      	ldr	r2, [r7, #24]
 8000f86:	4013      	ands	r3, r2
 8000f88:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4a4f      	ldr	r2, [pc, #316]	; (80010cc <HAL_GPIO_Init+0x308>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d025      	beq.n	8000fde <HAL_GPIO_Init+0x21a>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4a4e      	ldr	r2, [pc, #312]	; (80010d0 <HAL_GPIO_Init+0x30c>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d01f      	beq.n	8000fda <HAL_GPIO_Init+0x216>
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4a4d      	ldr	r2, [pc, #308]	; (80010d4 <HAL_GPIO_Init+0x310>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d019      	beq.n	8000fd6 <HAL_GPIO_Init+0x212>
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4a4c      	ldr	r2, [pc, #304]	; (80010d8 <HAL_GPIO_Init+0x314>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d013      	beq.n	8000fd2 <HAL_GPIO_Init+0x20e>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4a4b      	ldr	r2, [pc, #300]	; (80010dc <HAL_GPIO_Init+0x318>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d00d      	beq.n	8000fce <HAL_GPIO_Init+0x20a>
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4a4a      	ldr	r2, [pc, #296]	; (80010e0 <HAL_GPIO_Init+0x31c>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d007      	beq.n	8000fca <HAL_GPIO_Init+0x206>
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	4a49      	ldr	r2, [pc, #292]	; (80010e4 <HAL_GPIO_Init+0x320>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d101      	bne.n	8000fc6 <HAL_GPIO_Init+0x202>
 8000fc2:	2306      	movs	r3, #6
 8000fc4:	e00c      	b.n	8000fe0 <HAL_GPIO_Init+0x21c>
 8000fc6:	2307      	movs	r3, #7
 8000fc8:	e00a      	b.n	8000fe0 <HAL_GPIO_Init+0x21c>
 8000fca:	2305      	movs	r3, #5
 8000fcc:	e008      	b.n	8000fe0 <HAL_GPIO_Init+0x21c>
 8000fce:	2304      	movs	r3, #4
 8000fd0:	e006      	b.n	8000fe0 <HAL_GPIO_Init+0x21c>
 8000fd2:	2303      	movs	r3, #3
 8000fd4:	e004      	b.n	8000fe0 <HAL_GPIO_Init+0x21c>
 8000fd6:	2302      	movs	r3, #2
 8000fd8:	e002      	b.n	8000fe0 <HAL_GPIO_Init+0x21c>
 8000fda:	2301      	movs	r3, #1
 8000fdc:	e000      	b.n	8000fe0 <HAL_GPIO_Init+0x21c>
 8000fde:	2300      	movs	r3, #0
 8000fe0:	69fa      	ldr	r2, [r7, #28]
 8000fe2:	f002 0203 	and.w	r2, r2, #3
 8000fe6:	0092      	lsls	r2, r2, #2
 8000fe8:	4093      	lsls	r3, r2
 8000fea:	69ba      	ldr	r2, [r7, #24]
 8000fec:	4313      	orrs	r3, r2
 8000fee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ff0:	4935      	ldr	r1, [pc, #212]	; (80010c8 <HAL_GPIO_Init+0x304>)
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	089b      	lsrs	r3, r3, #2
 8000ff6:	3302      	adds	r3, #2
 8000ff8:	69ba      	ldr	r2, [r7, #24]
 8000ffa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ffe:	4b3a      	ldr	r3, [pc, #232]	; (80010e8 <HAL_GPIO_Init+0x324>)
 8001000:	689b      	ldr	r3, [r3, #8]
 8001002:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001004:	693b      	ldr	r3, [r7, #16]
 8001006:	43db      	mvns	r3, r3
 8001008:	69ba      	ldr	r2, [r7, #24]
 800100a:	4013      	ands	r3, r2
 800100c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001016:	2b00      	cmp	r3, #0
 8001018:	d003      	beq.n	8001022 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800101a:	69ba      	ldr	r2, [r7, #24]
 800101c:	693b      	ldr	r3, [r7, #16]
 800101e:	4313      	orrs	r3, r2
 8001020:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001022:	4a31      	ldr	r2, [pc, #196]	; (80010e8 <HAL_GPIO_Init+0x324>)
 8001024:	69bb      	ldr	r3, [r7, #24]
 8001026:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001028:	4b2f      	ldr	r3, [pc, #188]	; (80010e8 <HAL_GPIO_Init+0x324>)
 800102a:	68db      	ldr	r3, [r3, #12]
 800102c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800102e:	693b      	ldr	r3, [r7, #16]
 8001030:	43db      	mvns	r3, r3
 8001032:	69ba      	ldr	r2, [r7, #24]
 8001034:	4013      	ands	r3, r2
 8001036:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001040:	2b00      	cmp	r3, #0
 8001042:	d003      	beq.n	800104c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001044:	69ba      	ldr	r2, [r7, #24]
 8001046:	693b      	ldr	r3, [r7, #16]
 8001048:	4313      	orrs	r3, r2
 800104a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800104c:	4a26      	ldr	r2, [pc, #152]	; (80010e8 <HAL_GPIO_Init+0x324>)
 800104e:	69bb      	ldr	r3, [r7, #24]
 8001050:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001052:	4b25      	ldr	r3, [pc, #148]	; (80010e8 <HAL_GPIO_Init+0x324>)
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001058:	693b      	ldr	r3, [r7, #16]
 800105a:	43db      	mvns	r3, r3
 800105c:	69ba      	ldr	r2, [r7, #24]
 800105e:	4013      	ands	r3, r2
 8001060:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800106a:	2b00      	cmp	r3, #0
 800106c:	d003      	beq.n	8001076 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800106e:	69ba      	ldr	r2, [r7, #24]
 8001070:	693b      	ldr	r3, [r7, #16]
 8001072:	4313      	orrs	r3, r2
 8001074:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001076:	4a1c      	ldr	r2, [pc, #112]	; (80010e8 <HAL_GPIO_Init+0x324>)
 8001078:	69bb      	ldr	r3, [r7, #24]
 800107a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800107c:	4b1a      	ldr	r3, [pc, #104]	; (80010e8 <HAL_GPIO_Init+0x324>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001082:	693b      	ldr	r3, [r7, #16]
 8001084:	43db      	mvns	r3, r3
 8001086:	69ba      	ldr	r2, [r7, #24]
 8001088:	4013      	ands	r3, r2
 800108a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001094:	2b00      	cmp	r3, #0
 8001096:	d003      	beq.n	80010a0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001098:	69ba      	ldr	r2, [r7, #24]
 800109a:	693b      	ldr	r3, [r7, #16]
 800109c:	4313      	orrs	r3, r2
 800109e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010a0:	4a11      	ldr	r2, [pc, #68]	; (80010e8 <HAL_GPIO_Init+0x324>)
 80010a2:	69bb      	ldr	r3, [r7, #24]
 80010a4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	3301      	adds	r3, #1
 80010aa:	61fb      	str	r3, [r7, #28]
 80010ac:	69fb      	ldr	r3, [r7, #28]
 80010ae:	2b0f      	cmp	r3, #15
 80010b0:	f67f ae96 	bls.w	8000de0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80010b4:	bf00      	nop
 80010b6:	bf00      	nop
 80010b8:	3724      	adds	r7, #36	; 0x24
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop
 80010c4:	40023800 	.word	0x40023800
 80010c8:	40013800 	.word	0x40013800
 80010cc:	40020000 	.word	0x40020000
 80010d0:	40020400 	.word	0x40020400
 80010d4:	40020800 	.word	0x40020800
 80010d8:	40020c00 	.word	0x40020c00
 80010dc:	40021000 	.word	0x40021000
 80010e0:	40021400 	.word	0x40021400
 80010e4:	40021800 	.word	0x40021800
 80010e8:	40013c00 	.word	0x40013c00

080010ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
 80010f4:	460b      	mov	r3, r1
 80010f6:	807b      	strh	r3, [r7, #2]
 80010f8:	4613      	mov	r3, r2
 80010fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010fc:	787b      	ldrb	r3, [r7, #1]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d003      	beq.n	800110a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001102:	887a      	ldrh	r2, [r7, #2]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001108:	e003      	b.n	8001112 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800110a:	887b      	ldrh	r3, [r7, #2]
 800110c:	041a      	lsls	r2, r3, #16
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	619a      	str	r2, [r3, #24]
}
 8001112:	bf00      	nop
 8001114:	370c      	adds	r7, #12
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
	...

08001120 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d101      	bne.n	8001134 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001130:	2301      	movs	r3, #1
 8001132:	e0cc      	b.n	80012ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001134:	4b68      	ldr	r3, [pc, #416]	; (80012d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f003 030f 	and.w	r3, r3, #15
 800113c:	683a      	ldr	r2, [r7, #0]
 800113e:	429a      	cmp	r2, r3
 8001140:	d90c      	bls.n	800115c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001142:	4b65      	ldr	r3, [pc, #404]	; (80012d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001144:	683a      	ldr	r2, [r7, #0]
 8001146:	b2d2      	uxtb	r2, r2
 8001148:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800114a:	4b63      	ldr	r3, [pc, #396]	; (80012d8 <HAL_RCC_ClockConfig+0x1b8>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f003 030f 	and.w	r3, r3, #15
 8001152:	683a      	ldr	r2, [r7, #0]
 8001154:	429a      	cmp	r2, r3
 8001156:	d001      	beq.n	800115c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001158:	2301      	movs	r3, #1
 800115a:	e0b8      	b.n	80012ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f003 0302 	and.w	r3, r3, #2
 8001164:	2b00      	cmp	r3, #0
 8001166:	d020      	beq.n	80011aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f003 0304 	and.w	r3, r3, #4
 8001170:	2b00      	cmp	r3, #0
 8001172:	d005      	beq.n	8001180 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001174:	4b59      	ldr	r3, [pc, #356]	; (80012dc <HAL_RCC_ClockConfig+0x1bc>)
 8001176:	689b      	ldr	r3, [r3, #8]
 8001178:	4a58      	ldr	r2, [pc, #352]	; (80012dc <HAL_RCC_ClockConfig+0x1bc>)
 800117a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800117e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f003 0308 	and.w	r3, r3, #8
 8001188:	2b00      	cmp	r3, #0
 800118a:	d005      	beq.n	8001198 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800118c:	4b53      	ldr	r3, [pc, #332]	; (80012dc <HAL_RCC_ClockConfig+0x1bc>)
 800118e:	689b      	ldr	r3, [r3, #8]
 8001190:	4a52      	ldr	r2, [pc, #328]	; (80012dc <HAL_RCC_ClockConfig+0x1bc>)
 8001192:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001196:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001198:	4b50      	ldr	r3, [pc, #320]	; (80012dc <HAL_RCC_ClockConfig+0x1bc>)
 800119a:	689b      	ldr	r3, [r3, #8]
 800119c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	689b      	ldr	r3, [r3, #8]
 80011a4:	494d      	ldr	r1, [pc, #308]	; (80012dc <HAL_RCC_ClockConfig+0x1bc>)
 80011a6:	4313      	orrs	r3, r2
 80011a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f003 0301 	and.w	r3, r3, #1
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d044      	beq.n	8001240 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	2b01      	cmp	r3, #1
 80011bc:	d107      	bne.n	80011ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011be:	4b47      	ldr	r3, [pc, #284]	; (80012dc <HAL_RCC_ClockConfig+0x1bc>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d119      	bne.n	80011fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011ca:	2301      	movs	r3, #1
 80011cc:	e07f      	b.n	80012ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	2b02      	cmp	r3, #2
 80011d4:	d003      	beq.n	80011de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80011da:	2b03      	cmp	r3, #3
 80011dc:	d107      	bne.n	80011ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011de:	4b3f      	ldr	r3, [pc, #252]	; (80012dc <HAL_RCC_ClockConfig+0x1bc>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d109      	bne.n	80011fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011ea:	2301      	movs	r3, #1
 80011ec:	e06f      	b.n	80012ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011ee:	4b3b      	ldr	r3, [pc, #236]	; (80012dc <HAL_RCC_ClockConfig+0x1bc>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f003 0302 	and.w	r3, r3, #2
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d101      	bne.n	80011fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011fa:	2301      	movs	r3, #1
 80011fc:	e067      	b.n	80012ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80011fe:	4b37      	ldr	r3, [pc, #220]	; (80012dc <HAL_RCC_ClockConfig+0x1bc>)
 8001200:	689b      	ldr	r3, [r3, #8]
 8001202:	f023 0203 	bic.w	r2, r3, #3
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	4934      	ldr	r1, [pc, #208]	; (80012dc <HAL_RCC_ClockConfig+0x1bc>)
 800120c:	4313      	orrs	r3, r2
 800120e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001210:	f7ff fce6 	bl	8000be0 <HAL_GetTick>
 8001214:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001216:	e00a      	b.n	800122e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001218:	f7ff fce2 	bl	8000be0 <HAL_GetTick>
 800121c:	4602      	mov	r2, r0
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	1ad3      	subs	r3, r2, r3
 8001222:	f241 3288 	movw	r2, #5000	; 0x1388
 8001226:	4293      	cmp	r3, r2
 8001228:	d901      	bls.n	800122e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800122a:	2303      	movs	r3, #3
 800122c:	e04f      	b.n	80012ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800122e:	4b2b      	ldr	r3, [pc, #172]	; (80012dc <HAL_RCC_ClockConfig+0x1bc>)
 8001230:	689b      	ldr	r3, [r3, #8]
 8001232:	f003 020c 	and.w	r2, r3, #12
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	009b      	lsls	r3, r3, #2
 800123c:	429a      	cmp	r2, r3
 800123e:	d1eb      	bne.n	8001218 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001240:	4b25      	ldr	r3, [pc, #148]	; (80012d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f003 030f 	and.w	r3, r3, #15
 8001248:	683a      	ldr	r2, [r7, #0]
 800124a:	429a      	cmp	r2, r3
 800124c:	d20c      	bcs.n	8001268 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800124e:	4b22      	ldr	r3, [pc, #136]	; (80012d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001250:	683a      	ldr	r2, [r7, #0]
 8001252:	b2d2      	uxtb	r2, r2
 8001254:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001256:	4b20      	ldr	r3, [pc, #128]	; (80012d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f003 030f 	and.w	r3, r3, #15
 800125e:	683a      	ldr	r2, [r7, #0]
 8001260:	429a      	cmp	r2, r3
 8001262:	d001      	beq.n	8001268 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001264:	2301      	movs	r3, #1
 8001266:	e032      	b.n	80012ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f003 0304 	and.w	r3, r3, #4
 8001270:	2b00      	cmp	r3, #0
 8001272:	d008      	beq.n	8001286 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001274:	4b19      	ldr	r3, [pc, #100]	; (80012dc <HAL_RCC_ClockConfig+0x1bc>)
 8001276:	689b      	ldr	r3, [r3, #8]
 8001278:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	68db      	ldr	r3, [r3, #12]
 8001280:	4916      	ldr	r1, [pc, #88]	; (80012dc <HAL_RCC_ClockConfig+0x1bc>)
 8001282:	4313      	orrs	r3, r2
 8001284:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f003 0308 	and.w	r3, r3, #8
 800128e:	2b00      	cmp	r3, #0
 8001290:	d009      	beq.n	80012a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001292:	4b12      	ldr	r3, [pc, #72]	; (80012dc <HAL_RCC_ClockConfig+0x1bc>)
 8001294:	689b      	ldr	r3, [r3, #8]
 8001296:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	691b      	ldr	r3, [r3, #16]
 800129e:	00db      	lsls	r3, r3, #3
 80012a0:	490e      	ldr	r1, [pc, #56]	; (80012dc <HAL_RCC_ClockConfig+0x1bc>)
 80012a2:	4313      	orrs	r3, r2
 80012a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80012a6:	f000 f855 	bl	8001354 <HAL_RCC_GetSysClockFreq>
 80012aa:	4602      	mov	r2, r0
 80012ac:	4b0b      	ldr	r3, [pc, #44]	; (80012dc <HAL_RCC_ClockConfig+0x1bc>)
 80012ae:	689b      	ldr	r3, [r3, #8]
 80012b0:	091b      	lsrs	r3, r3, #4
 80012b2:	f003 030f 	and.w	r3, r3, #15
 80012b6:	490a      	ldr	r1, [pc, #40]	; (80012e0 <HAL_RCC_ClockConfig+0x1c0>)
 80012b8:	5ccb      	ldrb	r3, [r1, r3]
 80012ba:	fa22 f303 	lsr.w	r3, r2, r3
 80012be:	4a09      	ldr	r2, [pc, #36]	; (80012e4 <HAL_RCC_ClockConfig+0x1c4>)
 80012c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80012c2:	4b09      	ldr	r3, [pc, #36]	; (80012e8 <HAL_RCC_ClockConfig+0x1c8>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4618      	mov	r0, r3
 80012c8:	f7ff fc46 	bl	8000b58 <HAL_InitTick>

  return HAL_OK;
 80012cc:	2300      	movs	r3, #0
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3710      	adds	r7, #16
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	40023c00 	.word	0x40023c00
 80012dc:	40023800 	.word	0x40023800
 80012e0:	0800382c 	.word	0x0800382c
 80012e4:	20000000 	.word	0x20000000
 80012e8:	20000004 	.word	0x20000004

080012ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80012f0:	4b03      	ldr	r3, [pc, #12]	; (8001300 <HAL_RCC_GetHCLKFreq+0x14>)
 80012f2:	681b      	ldr	r3, [r3, #0]
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	20000000 	.word	0x20000000

08001304 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001308:	f7ff fff0 	bl	80012ec <HAL_RCC_GetHCLKFreq>
 800130c:	4602      	mov	r2, r0
 800130e:	4b05      	ldr	r3, [pc, #20]	; (8001324 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001310:	689b      	ldr	r3, [r3, #8]
 8001312:	0a9b      	lsrs	r3, r3, #10
 8001314:	f003 0307 	and.w	r3, r3, #7
 8001318:	4903      	ldr	r1, [pc, #12]	; (8001328 <HAL_RCC_GetPCLK1Freq+0x24>)
 800131a:	5ccb      	ldrb	r3, [r1, r3]
 800131c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001320:	4618      	mov	r0, r3
 8001322:	bd80      	pop	{r7, pc}
 8001324:	40023800 	.word	0x40023800
 8001328:	0800383c 	.word	0x0800383c

0800132c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001330:	f7ff ffdc 	bl	80012ec <HAL_RCC_GetHCLKFreq>
 8001334:	4602      	mov	r2, r0
 8001336:	4b05      	ldr	r3, [pc, #20]	; (800134c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001338:	689b      	ldr	r3, [r3, #8]
 800133a:	0b5b      	lsrs	r3, r3, #13
 800133c:	f003 0307 	and.w	r3, r3, #7
 8001340:	4903      	ldr	r1, [pc, #12]	; (8001350 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001342:	5ccb      	ldrb	r3, [r1, r3]
 8001344:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001348:	4618      	mov	r0, r3
 800134a:	bd80      	pop	{r7, pc}
 800134c:	40023800 	.word	0x40023800
 8001350:	0800383c 	.word	0x0800383c

08001354 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001354:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001358:	b0a6      	sub	sp, #152	; 0x98
 800135a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800135c:	2300      	movs	r3, #0
 800135e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 8001362:	2300      	movs	r3, #0
 8001364:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8001368:	2300      	movs	r3, #0
 800136a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 800136e:	2300      	movs	r3, #0
 8001370:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8001374:	2300      	movs	r3, #0
 8001376:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800137a:	4bc8      	ldr	r3, [pc, #800]	; (800169c <HAL_RCC_GetSysClockFreq+0x348>)
 800137c:	689b      	ldr	r3, [r3, #8]
 800137e:	f003 030c 	and.w	r3, r3, #12
 8001382:	2b0c      	cmp	r3, #12
 8001384:	f200 817e 	bhi.w	8001684 <HAL_RCC_GetSysClockFreq+0x330>
 8001388:	a201      	add	r2, pc, #4	; (adr r2, 8001390 <HAL_RCC_GetSysClockFreq+0x3c>)
 800138a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800138e:	bf00      	nop
 8001390:	080013c5 	.word	0x080013c5
 8001394:	08001685 	.word	0x08001685
 8001398:	08001685 	.word	0x08001685
 800139c:	08001685 	.word	0x08001685
 80013a0:	080013cd 	.word	0x080013cd
 80013a4:	08001685 	.word	0x08001685
 80013a8:	08001685 	.word	0x08001685
 80013ac:	08001685 	.word	0x08001685
 80013b0:	080013d5 	.word	0x080013d5
 80013b4:	08001685 	.word	0x08001685
 80013b8:	08001685 	.word	0x08001685
 80013bc:	08001685 	.word	0x08001685
 80013c0:	0800153f 	.word	0x0800153f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80013c4:	4bb6      	ldr	r3, [pc, #728]	; (80016a0 <HAL_RCC_GetSysClockFreq+0x34c>)
 80013c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 80013ca:	e15f      	b.n	800168c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80013cc:	4bb5      	ldr	r3, [pc, #724]	; (80016a4 <HAL_RCC_GetSysClockFreq+0x350>)
 80013ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80013d2:	e15b      	b.n	800168c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80013d4:	4bb1      	ldr	r3, [pc, #708]	; (800169c <HAL_RCC_GetSysClockFreq+0x348>)
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80013dc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80013e0:	4bae      	ldr	r3, [pc, #696]	; (800169c <HAL_RCC_GetSysClockFreq+0x348>)
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d031      	beq.n	8001450 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013ec:	4bab      	ldr	r3, [pc, #684]	; (800169c <HAL_RCC_GetSysClockFreq+0x348>)
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	099b      	lsrs	r3, r3, #6
 80013f2:	2200      	movs	r2, #0
 80013f4:	66bb      	str	r3, [r7, #104]	; 0x68
 80013f6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80013f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80013fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80013fe:	663b      	str	r3, [r7, #96]	; 0x60
 8001400:	2300      	movs	r3, #0
 8001402:	667b      	str	r3, [r7, #100]	; 0x64
 8001404:	4ba7      	ldr	r3, [pc, #668]	; (80016a4 <HAL_RCC_GetSysClockFreq+0x350>)
 8001406:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800140a:	462a      	mov	r2, r5
 800140c:	fb03 f202 	mul.w	r2, r3, r2
 8001410:	2300      	movs	r3, #0
 8001412:	4621      	mov	r1, r4
 8001414:	fb01 f303 	mul.w	r3, r1, r3
 8001418:	4413      	add	r3, r2
 800141a:	4aa2      	ldr	r2, [pc, #648]	; (80016a4 <HAL_RCC_GetSysClockFreq+0x350>)
 800141c:	4621      	mov	r1, r4
 800141e:	fba1 1202 	umull	r1, r2, r1, r2
 8001422:	67fa      	str	r2, [r7, #124]	; 0x7c
 8001424:	460a      	mov	r2, r1
 8001426:	67ba      	str	r2, [r7, #120]	; 0x78
 8001428:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800142a:	4413      	add	r3, r2
 800142c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800142e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001432:	2200      	movs	r2, #0
 8001434:	65bb      	str	r3, [r7, #88]	; 0x58
 8001436:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001438:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800143c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001440:	f7fe ff36 	bl	80002b0 <__aeabi_uldivmod>
 8001444:	4602      	mov	r2, r0
 8001446:	460b      	mov	r3, r1
 8001448:	4613      	mov	r3, r2
 800144a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800144e:	e064      	b.n	800151a <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001450:	4b92      	ldr	r3, [pc, #584]	; (800169c <HAL_RCC_GetSysClockFreq+0x348>)
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	099b      	lsrs	r3, r3, #6
 8001456:	2200      	movs	r2, #0
 8001458:	653b      	str	r3, [r7, #80]	; 0x50
 800145a:	657a      	str	r2, [r7, #84]	; 0x54
 800145c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800145e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001462:	64bb      	str	r3, [r7, #72]	; 0x48
 8001464:	2300      	movs	r3, #0
 8001466:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001468:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 800146c:	4622      	mov	r2, r4
 800146e:	462b      	mov	r3, r5
 8001470:	f04f 0000 	mov.w	r0, #0
 8001474:	f04f 0100 	mov.w	r1, #0
 8001478:	0159      	lsls	r1, r3, #5
 800147a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800147e:	0150      	lsls	r0, r2, #5
 8001480:	4602      	mov	r2, r0
 8001482:	460b      	mov	r3, r1
 8001484:	4621      	mov	r1, r4
 8001486:	1a51      	subs	r1, r2, r1
 8001488:	6139      	str	r1, [r7, #16]
 800148a:	4629      	mov	r1, r5
 800148c:	eb63 0301 	sbc.w	r3, r3, r1
 8001490:	617b      	str	r3, [r7, #20]
 8001492:	f04f 0200 	mov.w	r2, #0
 8001496:	f04f 0300 	mov.w	r3, #0
 800149a:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800149e:	4659      	mov	r1, fp
 80014a0:	018b      	lsls	r3, r1, #6
 80014a2:	4651      	mov	r1, sl
 80014a4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80014a8:	4651      	mov	r1, sl
 80014aa:	018a      	lsls	r2, r1, #6
 80014ac:	4651      	mov	r1, sl
 80014ae:	ebb2 0801 	subs.w	r8, r2, r1
 80014b2:	4659      	mov	r1, fp
 80014b4:	eb63 0901 	sbc.w	r9, r3, r1
 80014b8:	f04f 0200 	mov.w	r2, #0
 80014bc:	f04f 0300 	mov.w	r3, #0
 80014c0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80014c4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80014c8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80014cc:	4690      	mov	r8, r2
 80014ce:	4699      	mov	r9, r3
 80014d0:	4623      	mov	r3, r4
 80014d2:	eb18 0303 	adds.w	r3, r8, r3
 80014d6:	60bb      	str	r3, [r7, #8]
 80014d8:	462b      	mov	r3, r5
 80014da:	eb49 0303 	adc.w	r3, r9, r3
 80014de:	60fb      	str	r3, [r7, #12]
 80014e0:	f04f 0200 	mov.w	r2, #0
 80014e4:	f04f 0300 	mov.w	r3, #0
 80014e8:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80014ec:	4629      	mov	r1, r5
 80014ee:	028b      	lsls	r3, r1, #10
 80014f0:	4621      	mov	r1, r4
 80014f2:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80014f6:	4621      	mov	r1, r4
 80014f8:	028a      	lsls	r2, r1, #10
 80014fa:	4610      	mov	r0, r2
 80014fc:	4619      	mov	r1, r3
 80014fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001502:	2200      	movs	r2, #0
 8001504:	643b      	str	r3, [r7, #64]	; 0x40
 8001506:	647a      	str	r2, [r7, #68]	; 0x44
 8001508:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800150c:	f7fe fed0 	bl	80002b0 <__aeabi_uldivmod>
 8001510:	4602      	mov	r2, r0
 8001512:	460b      	mov	r3, r1
 8001514:	4613      	mov	r3, r2
 8001516:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800151a:	4b60      	ldr	r3, [pc, #384]	; (800169c <HAL_RCC_GetSysClockFreq+0x348>)
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	0c1b      	lsrs	r3, r3, #16
 8001520:	f003 0303 	and.w	r3, r3, #3
 8001524:	3301      	adds	r3, #1
 8001526:	005b      	lsls	r3, r3, #1
 8001528:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 800152c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001530:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001534:	fbb2 f3f3 	udiv	r3, r2, r3
 8001538:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800153c:	e0a6      	b.n	800168c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800153e:	4b57      	ldr	r3, [pc, #348]	; (800169c <HAL_RCC_GetSysClockFreq+0x348>)
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001546:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800154a:	4b54      	ldr	r3, [pc, #336]	; (800169c <HAL_RCC_GetSysClockFreq+0x348>)
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001552:	2b00      	cmp	r3, #0
 8001554:	d02a      	beq.n	80015ac <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001556:	4b51      	ldr	r3, [pc, #324]	; (800169c <HAL_RCC_GetSysClockFreq+0x348>)
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	099b      	lsrs	r3, r3, #6
 800155c:	2200      	movs	r2, #0
 800155e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001560:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001564:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001568:	2100      	movs	r1, #0
 800156a:	4b4e      	ldr	r3, [pc, #312]	; (80016a4 <HAL_RCC_GetSysClockFreq+0x350>)
 800156c:	fb03 f201 	mul.w	r2, r3, r1
 8001570:	2300      	movs	r3, #0
 8001572:	fb00 f303 	mul.w	r3, r0, r3
 8001576:	4413      	add	r3, r2
 8001578:	4a4a      	ldr	r2, [pc, #296]	; (80016a4 <HAL_RCC_GetSysClockFreq+0x350>)
 800157a:	fba0 1202 	umull	r1, r2, r0, r2
 800157e:	677a      	str	r2, [r7, #116]	; 0x74
 8001580:	460a      	mov	r2, r1
 8001582:	673a      	str	r2, [r7, #112]	; 0x70
 8001584:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001586:	4413      	add	r3, r2
 8001588:	677b      	str	r3, [r7, #116]	; 0x74
 800158a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800158e:	2200      	movs	r2, #0
 8001590:	633b      	str	r3, [r7, #48]	; 0x30
 8001592:	637a      	str	r2, [r7, #52]	; 0x34
 8001594:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001598:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800159c:	f7fe fe88 	bl	80002b0 <__aeabi_uldivmod>
 80015a0:	4602      	mov	r2, r0
 80015a2:	460b      	mov	r3, r1
 80015a4:	4613      	mov	r3, r2
 80015a6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80015aa:	e05b      	b.n	8001664 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015ac:	4b3b      	ldr	r3, [pc, #236]	; (800169c <HAL_RCC_GetSysClockFreq+0x348>)
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	099b      	lsrs	r3, r3, #6
 80015b2:	2200      	movs	r2, #0
 80015b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80015b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80015b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80015be:	623b      	str	r3, [r7, #32]
 80015c0:	2300      	movs	r3, #0
 80015c2:	627b      	str	r3, [r7, #36]	; 0x24
 80015c4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80015c8:	4642      	mov	r2, r8
 80015ca:	464b      	mov	r3, r9
 80015cc:	f04f 0000 	mov.w	r0, #0
 80015d0:	f04f 0100 	mov.w	r1, #0
 80015d4:	0159      	lsls	r1, r3, #5
 80015d6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80015da:	0150      	lsls	r0, r2, #5
 80015dc:	4602      	mov	r2, r0
 80015de:	460b      	mov	r3, r1
 80015e0:	4641      	mov	r1, r8
 80015e2:	ebb2 0a01 	subs.w	sl, r2, r1
 80015e6:	4649      	mov	r1, r9
 80015e8:	eb63 0b01 	sbc.w	fp, r3, r1
 80015ec:	f04f 0200 	mov.w	r2, #0
 80015f0:	f04f 0300 	mov.w	r3, #0
 80015f4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80015f8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80015fc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001600:	ebb2 040a 	subs.w	r4, r2, sl
 8001604:	eb63 050b 	sbc.w	r5, r3, fp
 8001608:	f04f 0200 	mov.w	r2, #0
 800160c:	f04f 0300 	mov.w	r3, #0
 8001610:	00eb      	lsls	r3, r5, #3
 8001612:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001616:	00e2      	lsls	r2, r4, #3
 8001618:	4614      	mov	r4, r2
 800161a:	461d      	mov	r5, r3
 800161c:	4643      	mov	r3, r8
 800161e:	18e3      	adds	r3, r4, r3
 8001620:	603b      	str	r3, [r7, #0]
 8001622:	464b      	mov	r3, r9
 8001624:	eb45 0303 	adc.w	r3, r5, r3
 8001628:	607b      	str	r3, [r7, #4]
 800162a:	f04f 0200 	mov.w	r2, #0
 800162e:	f04f 0300 	mov.w	r3, #0
 8001632:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001636:	4629      	mov	r1, r5
 8001638:	028b      	lsls	r3, r1, #10
 800163a:	4621      	mov	r1, r4
 800163c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001640:	4621      	mov	r1, r4
 8001642:	028a      	lsls	r2, r1, #10
 8001644:	4610      	mov	r0, r2
 8001646:	4619      	mov	r1, r3
 8001648:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800164c:	2200      	movs	r2, #0
 800164e:	61bb      	str	r3, [r7, #24]
 8001650:	61fa      	str	r2, [r7, #28]
 8001652:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001656:	f7fe fe2b 	bl	80002b0 <__aeabi_uldivmod>
 800165a:	4602      	mov	r2, r0
 800165c:	460b      	mov	r3, r1
 800165e:	4613      	mov	r3, r2
 8001660:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001664:	4b0d      	ldr	r3, [pc, #52]	; (800169c <HAL_RCC_GetSysClockFreq+0x348>)
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	0f1b      	lsrs	r3, r3, #28
 800166a:	f003 0307 	and.w	r3, r3, #7
 800166e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8001672:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001676:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800167a:	fbb2 f3f3 	udiv	r3, r2, r3
 800167e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8001682:	e003      	b.n	800168c <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001684:	4b06      	ldr	r3, [pc, #24]	; (80016a0 <HAL_RCC_GetSysClockFreq+0x34c>)
 8001686:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800168a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800168c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8001690:	4618      	mov	r0, r3
 8001692:	3798      	adds	r7, #152	; 0x98
 8001694:	46bd      	mov	sp, r7
 8001696:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800169a:	bf00      	nop
 800169c:	40023800 	.word	0x40023800
 80016a0:	00f42400 	.word	0x00f42400
 80016a4:	017d7840 	.word	0x017d7840

080016a8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b086      	sub	sp, #24
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d101      	bne.n	80016ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
 80016b8:	e28d      	b.n	8001bd6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f003 0301 	and.w	r3, r3, #1
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	f000 8083 	beq.w	80017ce <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80016c8:	4b94      	ldr	r3, [pc, #592]	; (800191c <HAL_RCC_OscConfig+0x274>)
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	f003 030c 	and.w	r3, r3, #12
 80016d0:	2b04      	cmp	r3, #4
 80016d2:	d019      	beq.n	8001708 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80016d4:	4b91      	ldr	r3, [pc, #580]	; (800191c <HAL_RCC_OscConfig+0x274>)
 80016d6:	689b      	ldr	r3, [r3, #8]
 80016d8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80016dc:	2b08      	cmp	r3, #8
 80016de:	d106      	bne.n	80016ee <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80016e0:	4b8e      	ldr	r3, [pc, #568]	; (800191c <HAL_RCC_OscConfig+0x274>)
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80016ec:	d00c      	beq.n	8001708 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016ee:	4b8b      	ldr	r3, [pc, #556]	; (800191c <HAL_RCC_OscConfig+0x274>)
 80016f0:	689b      	ldr	r3, [r3, #8]
 80016f2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80016f6:	2b0c      	cmp	r3, #12
 80016f8:	d112      	bne.n	8001720 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016fa:	4b88      	ldr	r3, [pc, #544]	; (800191c <HAL_RCC_OscConfig+0x274>)
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001702:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001706:	d10b      	bne.n	8001720 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001708:	4b84      	ldr	r3, [pc, #528]	; (800191c <HAL_RCC_OscConfig+0x274>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001710:	2b00      	cmp	r3, #0
 8001712:	d05b      	beq.n	80017cc <HAL_RCC_OscConfig+0x124>
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d157      	bne.n	80017cc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800171c:	2301      	movs	r3, #1
 800171e:	e25a      	b.n	8001bd6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001728:	d106      	bne.n	8001738 <HAL_RCC_OscConfig+0x90>
 800172a:	4b7c      	ldr	r3, [pc, #496]	; (800191c <HAL_RCC_OscConfig+0x274>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a7b      	ldr	r2, [pc, #492]	; (800191c <HAL_RCC_OscConfig+0x274>)
 8001730:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001734:	6013      	str	r3, [r2, #0]
 8001736:	e01d      	b.n	8001774 <HAL_RCC_OscConfig+0xcc>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001740:	d10c      	bne.n	800175c <HAL_RCC_OscConfig+0xb4>
 8001742:	4b76      	ldr	r3, [pc, #472]	; (800191c <HAL_RCC_OscConfig+0x274>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a75      	ldr	r2, [pc, #468]	; (800191c <HAL_RCC_OscConfig+0x274>)
 8001748:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800174c:	6013      	str	r3, [r2, #0]
 800174e:	4b73      	ldr	r3, [pc, #460]	; (800191c <HAL_RCC_OscConfig+0x274>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a72      	ldr	r2, [pc, #456]	; (800191c <HAL_RCC_OscConfig+0x274>)
 8001754:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001758:	6013      	str	r3, [r2, #0]
 800175a:	e00b      	b.n	8001774 <HAL_RCC_OscConfig+0xcc>
 800175c:	4b6f      	ldr	r3, [pc, #444]	; (800191c <HAL_RCC_OscConfig+0x274>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a6e      	ldr	r2, [pc, #440]	; (800191c <HAL_RCC_OscConfig+0x274>)
 8001762:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001766:	6013      	str	r3, [r2, #0]
 8001768:	4b6c      	ldr	r3, [pc, #432]	; (800191c <HAL_RCC_OscConfig+0x274>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a6b      	ldr	r2, [pc, #428]	; (800191c <HAL_RCC_OscConfig+0x274>)
 800176e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001772:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d013      	beq.n	80017a4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800177c:	f7ff fa30 	bl	8000be0 <HAL_GetTick>
 8001780:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001782:	e008      	b.n	8001796 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001784:	f7ff fa2c 	bl	8000be0 <HAL_GetTick>
 8001788:	4602      	mov	r2, r0
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	2b64      	cmp	r3, #100	; 0x64
 8001790:	d901      	bls.n	8001796 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001792:	2303      	movs	r3, #3
 8001794:	e21f      	b.n	8001bd6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001796:	4b61      	ldr	r3, [pc, #388]	; (800191c <HAL_RCC_OscConfig+0x274>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d0f0      	beq.n	8001784 <HAL_RCC_OscConfig+0xdc>
 80017a2:	e014      	b.n	80017ce <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017a4:	f7ff fa1c 	bl	8000be0 <HAL_GetTick>
 80017a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017aa:	e008      	b.n	80017be <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017ac:	f7ff fa18 	bl	8000be0 <HAL_GetTick>
 80017b0:	4602      	mov	r2, r0
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	2b64      	cmp	r3, #100	; 0x64
 80017b8:	d901      	bls.n	80017be <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80017ba:	2303      	movs	r3, #3
 80017bc:	e20b      	b.n	8001bd6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017be:	4b57      	ldr	r3, [pc, #348]	; (800191c <HAL_RCC_OscConfig+0x274>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d1f0      	bne.n	80017ac <HAL_RCC_OscConfig+0x104>
 80017ca:	e000      	b.n	80017ce <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 0302 	and.w	r3, r3, #2
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d06f      	beq.n	80018ba <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80017da:	4b50      	ldr	r3, [pc, #320]	; (800191c <HAL_RCC_OscConfig+0x274>)
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	f003 030c 	and.w	r3, r3, #12
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d017      	beq.n	8001816 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80017e6:	4b4d      	ldr	r3, [pc, #308]	; (800191c <HAL_RCC_OscConfig+0x274>)
 80017e8:	689b      	ldr	r3, [r3, #8]
 80017ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80017ee:	2b08      	cmp	r3, #8
 80017f0:	d105      	bne.n	80017fe <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80017f2:	4b4a      	ldr	r3, [pc, #296]	; (800191c <HAL_RCC_OscConfig+0x274>)
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d00b      	beq.n	8001816 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017fe:	4b47      	ldr	r3, [pc, #284]	; (800191c <HAL_RCC_OscConfig+0x274>)
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001806:	2b0c      	cmp	r3, #12
 8001808:	d11c      	bne.n	8001844 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800180a:	4b44      	ldr	r3, [pc, #272]	; (800191c <HAL_RCC_OscConfig+0x274>)
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001812:	2b00      	cmp	r3, #0
 8001814:	d116      	bne.n	8001844 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001816:	4b41      	ldr	r3, [pc, #260]	; (800191c <HAL_RCC_OscConfig+0x274>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f003 0302 	and.w	r3, r3, #2
 800181e:	2b00      	cmp	r3, #0
 8001820:	d005      	beq.n	800182e <HAL_RCC_OscConfig+0x186>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	68db      	ldr	r3, [r3, #12]
 8001826:	2b01      	cmp	r3, #1
 8001828:	d001      	beq.n	800182e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	e1d3      	b.n	8001bd6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800182e:	4b3b      	ldr	r3, [pc, #236]	; (800191c <HAL_RCC_OscConfig+0x274>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	691b      	ldr	r3, [r3, #16]
 800183a:	00db      	lsls	r3, r3, #3
 800183c:	4937      	ldr	r1, [pc, #220]	; (800191c <HAL_RCC_OscConfig+0x274>)
 800183e:	4313      	orrs	r3, r2
 8001840:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001842:	e03a      	b.n	80018ba <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	68db      	ldr	r3, [r3, #12]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d020      	beq.n	800188e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800184c:	4b34      	ldr	r3, [pc, #208]	; (8001920 <HAL_RCC_OscConfig+0x278>)
 800184e:	2201      	movs	r2, #1
 8001850:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001852:	f7ff f9c5 	bl	8000be0 <HAL_GetTick>
 8001856:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001858:	e008      	b.n	800186c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800185a:	f7ff f9c1 	bl	8000be0 <HAL_GetTick>
 800185e:	4602      	mov	r2, r0
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	1ad3      	subs	r3, r2, r3
 8001864:	2b02      	cmp	r3, #2
 8001866:	d901      	bls.n	800186c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001868:	2303      	movs	r3, #3
 800186a:	e1b4      	b.n	8001bd6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800186c:	4b2b      	ldr	r3, [pc, #172]	; (800191c <HAL_RCC_OscConfig+0x274>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f003 0302 	and.w	r3, r3, #2
 8001874:	2b00      	cmp	r3, #0
 8001876:	d0f0      	beq.n	800185a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001878:	4b28      	ldr	r3, [pc, #160]	; (800191c <HAL_RCC_OscConfig+0x274>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	691b      	ldr	r3, [r3, #16]
 8001884:	00db      	lsls	r3, r3, #3
 8001886:	4925      	ldr	r1, [pc, #148]	; (800191c <HAL_RCC_OscConfig+0x274>)
 8001888:	4313      	orrs	r3, r2
 800188a:	600b      	str	r3, [r1, #0]
 800188c:	e015      	b.n	80018ba <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800188e:	4b24      	ldr	r3, [pc, #144]	; (8001920 <HAL_RCC_OscConfig+0x278>)
 8001890:	2200      	movs	r2, #0
 8001892:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001894:	f7ff f9a4 	bl	8000be0 <HAL_GetTick>
 8001898:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800189a:	e008      	b.n	80018ae <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800189c:	f7ff f9a0 	bl	8000be0 <HAL_GetTick>
 80018a0:	4602      	mov	r2, r0
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	2b02      	cmp	r3, #2
 80018a8:	d901      	bls.n	80018ae <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80018aa:	2303      	movs	r3, #3
 80018ac:	e193      	b.n	8001bd6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018ae:	4b1b      	ldr	r3, [pc, #108]	; (800191c <HAL_RCC_OscConfig+0x274>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f003 0302 	and.w	r3, r3, #2
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d1f0      	bne.n	800189c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f003 0308 	and.w	r3, r3, #8
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d036      	beq.n	8001934 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	695b      	ldr	r3, [r3, #20]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d016      	beq.n	80018fc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018ce:	4b15      	ldr	r3, [pc, #84]	; (8001924 <HAL_RCC_OscConfig+0x27c>)
 80018d0:	2201      	movs	r2, #1
 80018d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018d4:	f7ff f984 	bl	8000be0 <HAL_GetTick>
 80018d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018da:	e008      	b.n	80018ee <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018dc:	f7ff f980 	bl	8000be0 <HAL_GetTick>
 80018e0:	4602      	mov	r2, r0
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	2b02      	cmp	r3, #2
 80018e8:	d901      	bls.n	80018ee <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80018ea:	2303      	movs	r3, #3
 80018ec:	e173      	b.n	8001bd6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018ee:	4b0b      	ldr	r3, [pc, #44]	; (800191c <HAL_RCC_OscConfig+0x274>)
 80018f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018f2:	f003 0302 	and.w	r3, r3, #2
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d0f0      	beq.n	80018dc <HAL_RCC_OscConfig+0x234>
 80018fa:	e01b      	b.n	8001934 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018fc:	4b09      	ldr	r3, [pc, #36]	; (8001924 <HAL_RCC_OscConfig+0x27c>)
 80018fe:	2200      	movs	r2, #0
 8001900:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001902:	f7ff f96d 	bl	8000be0 <HAL_GetTick>
 8001906:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001908:	e00e      	b.n	8001928 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800190a:	f7ff f969 	bl	8000be0 <HAL_GetTick>
 800190e:	4602      	mov	r2, r0
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	1ad3      	subs	r3, r2, r3
 8001914:	2b02      	cmp	r3, #2
 8001916:	d907      	bls.n	8001928 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001918:	2303      	movs	r3, #3
 800191a:	e15c      	b.n	8001bd6 <HAL_RCC_OscConfig+0x52e>
 800191c:	40023800 	.word	0x40023800
 8001920:	42470000 	.word	0x42470000
 8001924:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001928:	4b8a      	ldr	r3, [pc, #552]	; (8001b54 <HAL_RCC_OscConfig+0x4ac>)
 800192a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800192c:	f003 0302 	and.w	r3, r3, #2
 8001930:	2b00      	cmp	r3, #0
 8001932:	d1ea      	bne.n	800190a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f003 0304 	and.w	r3, r3, #4
 800193c:	2b00      	cmp	r3, #0
 800193e:	f000 8097 	beq.w	8001a70 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001942:	2300      	movs	r3, #0
 8001944:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001946:	4b83      	ldr	r3, [pc, #524]	; (8001b54 <HAL_RCC_OscConfig+0x4ac>)
 8001948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800194e:	2b00      	cmp	r3, #0
 8001950:	d10f      	bne.n	8001972 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001952:	2300      	movs	r3, #0
 8001954:	60bb      	str	r3, [r7, #8]
 8001956:	4b7f      	ldr	r3, [pc, #508]	; (8001b54 <HAL_RCC_OscConfig+0x4ac>)
 8001958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195a:	4a7e      	ldr	r2, [pc, #504]	; (8001b54 <HAL_RCC_OscConfig+0x4ac>)
 800195c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001960:	6413      	str	r3, [r2, #64]	; 0x40
 8001962:	4b7c      	ldr	r3, [pc, #496]	; (8001b54 <HAL_RCC_OscConfig+0x4ac>)
 8001964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001966:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800196a:	60bb      	str	r3, [r7, #8]
 800196c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800196e:	2301      	movs	r3, #1
 8001970:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001972:	4b79      	ldr	r3, [pc, #484]	; (8001b58 <HAL_RCC_OscConfig+0x4b0>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800197a:	2b00      	cmp	r3, #0
 800197c:	d118      	bne.n	80019b0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800197e:	4b76      	ldr	r3, [pc, #472]	; (8001b58 <HAL_RCC_OscConfig+0x4b0>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a75      	ldr	r2, [pc, #468]	; (8001b58 <HAL_RCC_OscConfig+0x4b0>)
 8001984:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001988:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800198a:	f7ff f929 	bl	8000be0 <HAL_GetTick>
 800198e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001990:	e008      	b.n	80019a4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001992:	f7ff f925 	bl	8000be0 <HAL_GetTick>
 8001996:	4602      	mov	r2, r0
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	1ad3      	subs	r3, r2, r3
 800199c:	2b02      	cmp	r3, #2
 800199e:	d901      	bls.n	80019a4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80019a0:	2303      	movs	r3, #3
 80019a2:	e118      	b.n	8001bd6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019a4:	4b6c      	ldr	r3, [pc, #432]	; (8001b58 <HAL_RCC_OscConfig+0x4b0>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d0f0      	beq.n	8001992 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	d106      	bne.n	80019c6 <HAL_RCC_OscConfig+0x31e>
 80019b8:	4b66      	ldr	r3, [pc, #408]	; (8001b54 <HAL_RCC_OscConfig+0x4ac>)
 80019ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019bc:	4a65      	ldr	r2, [pc, #404]	; (8001b54 <HAL_RCC_OscConfig+0x4ac>)
 80019be:	f043 0301 	orr.w	r3, r3, #1
 80019c2:	6713      	str	r3, [r2, #112]	; 0x70
 80019c4:	e01c      	b.n	8001a00 <HAL_RCC_OscConfig+0x358>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	2b05      	cmp	r3, #5
 80019cc:	d10c      	bne.n	80019e8 <HAL_RCC_OscConfig+0x340>
 80019ce:	4b61      	ldr	r3, [pc, #388]	; (8001b54 <HAL_RCC_OscConfig+0x4ac>)
 80019d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019d2:	4a60      	ldr	r2, [pc, #384]	; (8001b54 <HAL_RCC_OscConfig+0x4ac>)
 80019d4:	f043 0304 	orr.w	r3, r3, #4
 80019d8:	6713      	str	r3, [r2, #112]	; 0x70
 80019da:	4b5e      	ldr	r3, [pc, #376]	; (8001b54 <HAL_RCC_OscConfig+0x4ac>)
 80019dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019de:	4a5d      	ldr	r2, [pc, #372]	; (8001b54 <HAL_RCC_OscConfig+0x4ac>)
 80019e0:	f043 0301 	orr.w	r3, r3, #1
 80019e4:	6713      	str	r3, [r2, #112]	; 0x70
 80019e6:	e00b      	b.n	8001a00 <HAL_RCC_OscConfig+0x358>
 80019e8:	4b5a      	ldr	r3, [pc, #360]	; (8001b54 <HAL_RCC_OscConfig+0x4ac>)
 80019ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019ec:	4a59      	ldr	r2, [pc, #356]	; (8001b54 <HAL_RCC_OscConfig+0x4ac>)
 80019ee:	f023 0301 	bic.w	r3, r3, #1
 80019f2:	6713      	str	r3, [r2, #112]	; 0x70
 80019f4:	4b57      	ldr	r3, [pc, #348]	; (8001b54 <HAL_RCC_OscConfig+0x4ac>)
 80019f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019f8:	4a56      	ldr	r2, [pc, #344]	; (8001b54 <HAL_RCC_OscConfig+0x4ac>)
 80019fa:	f023 0304 	bic.w	r3, r3, #4
 80019fe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d015      	beq.n	8001a34 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a08:	f7ff f8ea 	bl	8000be0 <HAL_GetTick>
 8001a0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a0e:	e00a      	b.n	8001a26 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a10:	f7ff f8e6 	bl	8000be0 <HAL_GetTick>
 8001a14:	4602      	mov	r2, r0
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d901      	bls.n	8001a26 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001a22:	2303      	movs	r3, #3
 8001a24:	e0d7      	b.n	8001bd6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a26:	4b4b      	ldr	r3, [pc, #300]	; (8001b54 <HAL_RCC_OscConfig+0x4ac>)
 8001a28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a2a:	f003 0302 	and.w	r3, r3, #2
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d0ee      	beq.n	8001a10 <HAL_RCC_OscConfig+0x368>
 8001a32:	e014      	b.n	8001a5e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a34:	f7ff f8d4 	bl	8000be0 <HAL_GetTick>
 8001a38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a3a:	e00a      	b.n	8001a52 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a3c:	f7ff f8d0 	bl	8000be0 <HAL_GetTick>
 8001a40:	4602      	mov	r2, r0
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d901      	bls.n	8001a52 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	e0c1      	b.n	8001bd6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a52:	4b40      	ldr	r3, [pc, #256]	; (8001b54 <HAL_RCC_OscConfig+0x4ac>)
 8001a54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a56:	f003 0302 	and.w	r3, r3, #2
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d1ee      	bne.n	8001a3c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a5e:	7dfb      	ldrb	r3, [r7, #23]
 8001a60:	2b01      	cmp	r3, #1
 8001a62:	d105      	bne.n	8001a70 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a64:	4b3b      	ldr	r3, [pc, #236]	; (8001b54 <HAL_RCC_OscConfig+0x4ac>)
 8001a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a68:	4a3a      	ldr	r2, [pc, #232]	; (8001b54 <HAL_RCC_OscConfig+0x4ac>)
 8001a6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a6e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	699b      	ldr	r3, [r3, #24]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	f000 80ad 	beq.w	8001bd4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a7a:	4b36      	ldr	r3, [pc, #216]	; (8001b54 <HAL_RCC_OscConfig+0x4ac>)
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	f003 030c 	and.w	r3, r3, #12
 8001a82:	2b08      	cmp	r3, #8
 8001a84:	d060      	beq.n	8001b48 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	699b      	ldr	r3, [r3, #24]
 8001a8a:	2b02      	cmp	r3, #2
 8001a8c:	d145      	bne.n	8001b1a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a8e:	4b33      	ldr	r3, [pc, #204]	; (8001b5c <HAL_RCC_OscConfig+0x4b4>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a94:	f7ff f8a4 	bl	8000be0 <HAL_GetTick>
 8001a98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a9a:	e008      	b.n	8001aae <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a9c:	f7ff f8a0 	bl	8000be0 <HAL_GetTick>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	2b02      	cmp	r3, #2
 8001aa8:	d901      	bls.n	8001aae <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	e093      	b.n	8001bd6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001aae:	4b29      	ldr	r3, [pc, #164]	; (8001b54 <HAL_RCC_OscConfig+0x4ac>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d1f0      	bne.n	8001a9c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	69da      	ldr	r2, [r3, #28]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6a1b      	ldr	r3, [r3, #32]
 8001ac2:	431a      	orrs	r2, r3
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac8:	019b      	lsls	r3, r3, #6
 8001aca:	431a      	orrs	r2, r3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ad0:	085b      	lsrs	r3, r3, #1
 8001ad2:	3b01      	subs	r3, #1
 8001ad4:	041b      	lsls	r3, r3, #16
 8001ad6:	431a      	orrs	r2, r3
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001adc:	061b      	lsls	r3, r3, #24
 8001ade:	431a      	orrs	r2, r3
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae4:	071b      	lsls	r3, r3, #28
 8001ae6:	491b      	ldr	r1, [pc, #108]	; (8001b54 <HAL_RCC_OscConfig+0x4ac>)
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001aec:	4b1b      	ldr	r3, [pc, #108]	; (8001b5c <HAL_RCC_OscConfig+0x4b4>)
 8001aee:	2201      	movs	r2, #1
 8001af0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001af2:	f7ff f875 	bl	8000be0 <HAL_GetTick>
 8001af6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001af8:	e008      	b.n	8001b0c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001afa:	f7ff f871 	bl	8000be0 <HAL_GetTick>
 8001afe:	4602      	mov	r2, r0
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	1ad3      	subs	r3, r2, r3
 8001b04:	2b02      	cmp	r3, #2
 8001b06:	d901      	bls.n	8001b0c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001b08:	2303      	movs	r3, #3
 8001b0a:	e064      	b.n	8001bd6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b0c:	4b11      	ldr	r3, [pc, #68]	; (8001b54 <HAL_RCC_OscConfig+0x4ac>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d0f0      	beq.n	8001afa <HAL_RCC_OscConfig+0x452>
 8001b18:	e05c      	b.n	8001bd4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b1a:	4b10      	ldr	r3, [pc, #64]	; (8001b5c <HAL_RCC_OscConfig+0x4b4>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b20:	f7ff f85e 	bl	8000be0 <HAL_GetTick>
 8001b24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b26:	e008      	b.n	8001b3a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b28:	f7ff f85a 	bl	8000be0 <HAL_GetTick>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	2b02      	cmp	r3, #2
 8001b34:	d901      	bls.n	8001b3a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001b36:	2303      	movs	r3, #3
 8001b38:	e04d      	b.n	8001bd6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b3a:	4b06      	ldr	r3, [pc, #24]	; (8001b54 <HAL_RCC_OscConfig+0x4ac>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d1f0      	bne.n	8001b28 <HAL_RCC_OscConfig+0x480>
 8001b46:	e045      	b.n	8001bd4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	699b      	ldr	r3, [r3, #24]
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d107      	bne.n	8001b60 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
 8001b52:	e040      	b.n	8001bd6 <HAL_RCC_OscConfig+0x52e>
 8001b54:	40023800 	.word	0x40023800
 8001b58:	40007000 	.word	0x40007000
 8001b5c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001b60:	4b1f      	ldr	r3, [pc, #124]	; (8001be0 <HAL_RCC_OscConfig+0x538>)
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	699b      	ldr	r3, [r3, #24]
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d030      	beq.n	8001bd0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d129      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b86:	429a      	cmp	r2, r3
 8001b88:	d122      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b8a:	68fa      	ldr	r2, [r7, #12]
 8001b8c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001b90:	4013      	ands	r3, r2
 8001b92:	687a      	ldr	r2, [r7, #4]
 8001b94:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001b96:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d119      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ba6:	085b      	lsrs	r3, r3, #1
 8001ba8:	3b01      	subs	r3, #1
 8001baa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d10f      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d107      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bca:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d001      	beq.n	8001bd4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	e000      	b.n	8001bd6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001bd4:	2300      	movs	r3, #0
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3718      	adds	r7, #24
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	40023800 	.word	0x40023800

08001be4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d101      	bne.n	8001bf6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e07b      	b.n	8001cee <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d108      	bne.n	8001c10 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001c06:	d009      	beq.n	8001c1c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	61da      	str	r2, [r3, #28]
 8001c0e:	e005      	b.n	8001c1c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2200      	movs	r2, #0
 8001c14:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2200      	movs	r2, #0
 8001c20:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d106      	bne.n	8001c3c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2200      	movs	r2, #0
 8001c32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f7fe fe40 	bl	80008bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2202      	movs	r2, #2
 8001c40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001c52:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001c64:	431a      	orrs	r2, r3
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	68db      	ldr	r3, [r3, #12]
 8001c6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c6e:	431a      	orrs	r2, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	691b      	ldr	r3, [r3, #16]
 8001c74:	f003 0302 	and.w	r3, r3, #2
 8001c78:	431a      	orrs	r2, r3
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	695b      	ldr	r3, [r3, #20]
 8001c7e:	f003 0301 	and.w	r3, r3, #1
 8001c82:	431a      	orrs	r2, r3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	699b      	ldr	r3, [r3, #24]
 8001c88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c8c:	431a      	orrs	r2, r3
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	69db      	ldr	r3, [r3, #28]
 8001c92:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001c96:	431a      	orrs	r2, r3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6a1b      	ldr	r3, [r3, #32]
 8001c9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ca0:	ea42 0103 	orr.w	r1, r2, r3
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ca8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	430a      	orrs	r2, r1
 8001cb2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	699b      	ldr	r3, [r3, #24]
 8001cb8:	0c1b      	lsrs	r3, r3, #16
 8001cba:	f003 0104 	and.w	r1, r3, #4
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc2:	f003 0210 	and.w	r2, r3, #16
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	430a      	orrs	r2, r1
 8001ccc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	69da      	ldr	r2, [r3, #28]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001cdc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001cec:	2300      	movs	r3, #0
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3708      	adds	r7, #8
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}

08001cf6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001cf6:	b580      	push	{r7, lr}
 8001cf8:	b088      	sub	sp, #32
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	60f8      	str	r0, [r7, #12]
 8001cfe:	60b9      	str	r1, [r7, #8]
 8001d00:	603b      	str	r3, [r7, #0]
 8001d02:	4613      	mov	r3, r2
 8001d04:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001d06:	2300      	movs	r3, #0
 8001d08:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	d101      	bne.n	8001d18 <HAL_SPI_Transmit+0x22>
 8001d14:	2302      	movs	r3, #2
 8001d16:	e126      	b.n	8001f66 <HAL_SPI_Transmit+0x270>
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001d20:	f7fe ff5e 	bl	8000be0 <HAL_GetTick>
 8001d24:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001d26:	88fb      	ldrh	r3, [r7, #6]
 8001d28:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d002      	beq.n	8001d3c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001d36:	2302      	movs	r3, #2
 8001d38:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001d3a:	e10b      	b.n	8001f54 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d002      	beq.n	8001d48 <HAL_SPI_Transmit+0x52>
 8001d42:	88fb      	ldrh	r3, [r7, #6]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d102      	bne.n	8001d4e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001d4c:	e102      	b.n	8001f54 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	2203      	movs	r2, #3
 8001d52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	68ba      	ldr	r2, [r7, #8]
 8001d60:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	88fa      	ldrh	r2, [r7, #6]
 8001d66:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	88fa      	ldrh	r2, [r7, #6]
 8001d6c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	2200      	movs	r2, #0
 8001d72:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	2200      	movs	r2, #0
 8001d78:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	2200      	movs	r2, #0
 8001d84:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d94:	d10f      	bne.n	8001db6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001da4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001db4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dc0:	2b40      	cmp	r3, #64	; 0x40
 8001dc2:	d007      	beq.n	8001dd4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001dd2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001ddc:	d14b      	bne.n	8001e76 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d002      	beq.n	8001dec <HAL_SPI_Transmit+0xf6>
 8001de6:	8afb      	ldrh	r3, [r7, #22]
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d13e      	bne.n	8001e6a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df0:	881a      	ldrh	r2, [r3, #0]
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfc:	1c9a      	adds	r2, r3, #2
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e06:	b29b      	uxth	r3, r3
 8001e08:	3b01      	subs	r3, #1
 8001e0a:	b29a      	uxth	r2, r3
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001e10:	e02b      	b.n	8001e6a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	f003 0302 	and.w	r3, r3, #2
 8001e1c:	2b02      	cmp	r3, #2
 8001e1e:	d112      	bne.n	8001e46 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e24:	881a      	ldrh	r2, [r3, #0]
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e30:	1c9a      	adds	r2, r3, #2
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e3a:	b29b      	uxth	r3, r3
 8001e3c:	3b01      	subs	r3, #1
 8001e3e:	b29a      	uxth	r2, r3
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	86da      	strh	r2, [r3, #54]	; 0x36
 8001e44:	e011      	b.n	8001e6a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001e46:	f7fe fecb 	bl	8000be0 <HAL_GetTick>
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	69bb      	ldr	r3, [r7, #24]
 8001e4e:	1ad3      	subs	r3, r2, r3
 8001e50:	683a      	ldr	r2, [r7, #0]
 8001e52:	429a      	cmp	r2, r3
 8001e54:	d803      	bhi.n	8001e5e <HAL_SPI_Transmit+0x168>
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e5c:	d102      	bne.n	8001e64 <HAL_SPI_Transmit+0x16e>
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d102      	bne.n	8001e6a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8001e64:	2303      	movs	r3, #3
 8001e66:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001e68:	e074      	b.n	8001f54 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e6e:	b29b      	uxth	r3, r3
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d1ce      	bne.n	8001e12 <HAL_SPI_Transmit+0x11c>
 8001e74:	e04c      	b.n	8001f10 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d002      	beq.n	8001e84 <HAL_SPI_Transmit+0x18e>
 8001e7e:	8afb      	ldrh	r3, [r7, #22]
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d140      	bne.n	8001f06 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	330c      	adds	r3, #12
 8001e8e:	7812      	ldrb	r2, [r2, #0]
 8001e90:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e96:	1c5a      	adds	r2, r3, #1
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ea0:	b29b      	uxth	r3, r3
 8001ea2:	3b01      	subs	r3, #1
 8001ea4:	b29a      	uxth	r2, r3
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001eaa:	e02c      	b.n	8001f06 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	f003 0302 	and.w	r3, r3, #2
 8001eb6:	2b02      	cmp	r3, #2
 8001eb8:	d113      	bne.n	8001ee2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	330c      	adds	r3, #12
 8001ec4:	7812      	ldrb	r2, [r2, #0]
 8001ec6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ecc:	1c5a      	adds	r2, r3, #1
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ed6:	b29b      	uxth	r3, r3
 8001ed8:	3b01      	subs	r3, #1
 8001eda:	b29a      	uxth	r2, r3
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	86da      	strh	r2, [r3, #54]	; 0x36
 8001ee0:	e011      	b.n	8001f06 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001ee2:	f7fe fe7d 	bl	8000be0 <HAL_GetTick>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	69bb      	ldr	r3, [r7, #24]
 8001eea:	1ad3      	subs	r3, r2, r3
 8001eec:	683a      	ldr	r2, [r7, #0]
 8001eee:	429a      	cmp	r2, r3
 8001ef0:	d803      	bhi.n	8001efa <HAL_SPI_Transmit+0x204>
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ef8:	d102      	bne.n	8001f00 <HAL_SPI_Transmit+0x20a>
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d102      	bne.n	8001f06 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8001f00:	2303      	movs	r3, #3
 8001f02:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001f04:	e026      	b.n	8001f54 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f0a:	b29b      	uxth	r3, r3
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d1cd      	bne.n	8001eac <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001f10:	69ba      	ldr	r2, [r7, #24]
 8001f12:	6839      	ldr	r1, [r7, #0]
 8001f14:	68f8      	ldr	r0, [r7, #12]
 8001f16:	f000 fbcb 	bl	80026b0 <SPI_EndRxTxTransaction>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d002      	beq.n	8001f26 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	2220      	movs	r2, #32
 8001f24:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d10a      	bne.n	8001f44 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001f2e:	2300      	movs	r3, #0
 8001f30:	613b      	str	r3, [r7, #16]
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	613b      	str	r3, [r7, #16]
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	613b      	str	r3, [r7, #16]
 8001f42:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d002      	beq.n	8001f52 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	77fb      	strb	r3, [r7, #31]
 8001f50:	e000      	b.n	8001f54 <HAL_SPI_Transmit+0x25e>
  }

error:
 8001f52:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	2201      	movs	r2, #1
 8001f58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001f64:	7ffb      	ldrb	r3, [r7, #31]
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3720      	adds	r7, #32
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}

08001f6e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f6e:	b580      	push	{r7, lr}
 8001f70:	b088      	sub	sp, #32
 8001f72:	af02      	add	r7, sp, #8
 8001f74:	60f8      	str	r0, [r7, #12]
 8001f76:	60b9      	str	r1, [r7, #8]
 8001f78:	603b      	str	r3, [r7, #0]
 8001f7a:	4613      	mov	r3, r2
 8001f7c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001f8a:	d112      	bne.n	8001fb2 <HAL_SPI_Receive+0x44>
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d10e      	bne.n	8001fb2 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	2204      	movs	r2, #4
 8001f98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8001f9c:	88fa      	ldrh	r2, [r7, #6]
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	9300      	str	r3, [sp, #0]
 8001fa2:	4613      	mov	r3, r2
 8001fa4:	68ba      	ldr	r2, [r7, #8]
 8001fa6:	68b9      	ldr	r1, [r7, #8]
 8001fa8:	68f8      	ldr	r0, [r7, #12]
 8001faa:	f000 f8f1 	bl	8002190 <HAL_SPI_TransmitReceive>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	e0ea      	b.n	8002188 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d101      	bne.n	8001fc0 <HAL_SPI_Receive+0x52>
 8001fbc:	2302      	movs	r3, #2
 8001fbe:	e0e3      	b.n	8002188 <HAL_SPI_Receive+0x21a>
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001fc8:	f7fe fe0a 	bl	8000be0 <HAL_GetTick>
 8001fcc:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d002      	beq.n	8001fe0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8001fda:	2302      	movs	r3, #2
 8001fdc:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001fde:	e0ca      	b.n	8002176 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d002      	beq.n	8001fec <HAL_SPI_Receive+0x7e>
 8001fe6:	88fb      	ldrh	r3, [r7, #6]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d102      	bne.n	8001ff2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001ff0:	e0c1      	b.n	8002176 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	2204      	movs	r2, #4
 8001ff6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	68ba      	ldr	r2, [r7, #8]
 8002004:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	88fa      	ldrh	r2, [r7, #6]
 800200a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	88fa      	ldrh	r2, [r7, #6]
 8002010:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	2200      	movs	r2, #0
 8002016:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	2200      	movs	r2, #0
 800201c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	2200      	movs	r2, #0
 8002022:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	2200      	movs	r2, #0
 8002028:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	2200      	movs	r2, #0
 800202e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002038:	d10f      	bne.n	800205a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002048:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002058:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002064:	2b40      	cmp	r3, #64	; 0x40
 8002066:	d007      	beq.n	8002078 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002076:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d162      	bne.n	8002146 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002080:	e02e      	b.n	80020e0 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	f003 0301 	and.w	r3, r3, #1
 800208c:	2b01      	cmp	r3, #1
 800208e:	d115      	bne.n	80020bc <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f103 020c 	add.w	r2, r3, #12
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800209c:	7812      	ldrb	r2, [r2, #0]
 800209e:	b2d2      	uxtb	r2, r2
 80020a0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020a6:	1c5a      	adds	r2, r3, #1
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020b0:	b29b      	uxth	r3, r3
 80020b2:	3b01      	subs	r3, #1
 80020b4:	b29a      	uxth	r2, r3
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80020ba:	e011      	b.n	80020e0 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80020bc:	f7fe fd90 	bl	8000be0 <HAL_GetTick>
 80020c0:	4602      	mov	r2, r0
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	1ad3      	subs	r3, r2, r3
 80020c6:	683a      	ldr	r2, [r7, #0]
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d803      	bhi.n	80020d4 <HAL_SPI_Receive+0x166>
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020d2:	d102      	bne.n	80020da <HAL_SPI_Receive+0x16c>
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d102      	bne.n	80020e0 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80020da:	2303      	movs	r3, #3
 80020dc:	75fb      	strb	r3, [r7, #23]
          goto error;
 80020de:	e04a      	b.n	8002176 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020e4:	b29b      	uxth	r3, r3
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d1cb      	bne.n	8002082 <HAL_SPI_Receive+0x114>
 80020ea:	e031      	b.n	8002150 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	f003 0301 	and.w	r3, r3, #1
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d113      	bne.n	8002122 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	68da      	ldr	r2, [r3, #12]
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002104:	b292      	uxth	r2, r2
 8002106:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800210c:	1c9a      	adds	r2, r3, #2
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002116:	b29b      	uxth	r3, r3
 8002118:	3b01      	subs	r3, #1
 800211a:	b29a      	uxth	r2, r3
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002120:	e011      	b.n	8002146 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002122:	f7fe fd5d 	bl	8000be0 <HAL_GetTick>
 8002126:	4602      	mov	r2, r0
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	1ad3      	subs	r3, r2, r3
 800212c:	683a      	ldr	r2, [r7, #0]
 800212e:	429a      	cmp	r2, r3
 8002130:	d803      	bhi.n	800213a <HAL_SPI_Receive+0x1cc>
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002138:	d102      	bne.n	8002140 <HAL_SPI_Receive+0x1d2>
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d102      	bne.n	8002146 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8002140:	2303      	movs	r3, #3
 8002142:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002144:	e017      	b.n	8002176 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800214a:	b29b      	uxth	r3, r3
 800214c:	2b00      	cmp	r3, #0
 800214e:	d1cd      	bne.n	80020ec <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002150:	693a      	ldr	r2, [r7, #16]
 8002152:	6839      	ldr	r1, [r7, #0]
 8002154:	68f8      	ldr	r0, [r7, #12]
 8002156:	f000 fa45 	bl	80025e4 <SPI_EndRxTransaction>
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	d002      	beq.n	8002166 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	2220      	movs	r2, #32
 8002164:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800216a:	2b00      	cmp	r3, #0
 800216c:	d002      	beq.n	8002174 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	75fb      	strb	r3, [r7, #23]
 8002172:	e000      	b.n	8002176 <HAL_SPI_Receive+0x208>
  }

error :
 8002174:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	2201      	movs	r2, #1
 800217a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	2200      	movs	r2, #0
 8002182:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002186:	7dfb      	ldrb	r3, [r7, #23]
}
 8002188:	4618      	mov	r0, r3
 800218a:	3718      	adds	r7, #24
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}

08002190 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b08c      	sub	sp, #48	; 0x30
 8002194:	af00      	add	r7, sp, #0
 8002196:	60f8      	str	r0, [r7, #12]
 8002198:	60b9      	str	r1, [r7, #8]
 800219a:	607a      	str	r2, [r7, #4]
 800219c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800219e:	2301      	movs	r3, #1
 80021a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80021a2:	2300      	movs	r3, #0
 80021a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d101      	bne.n	80021b6 <HAL_SPI_TransmitReceive+0x26>
 80021b2:	2302      	movs	r3, #2
 80021b4:	e18a      	b.n	80024cc <HAL_SPI_TransmitReceive+0x33c>
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2201      	movs	r2, #1
 80021ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80021be:	f7fe fd0f 	bl	8000be0 <HAL_GetTick>
 80021c2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80021ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80021d4:	887b      	ldrh	r3, [r7, #2]
 80021d6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80021d8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d00f      	beq.n	8002200 <HAL_SPI_TransmitReceive+0x70>
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80021e6:	d107      	bne.n	80021f8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d103      	bne.n	80021f8 <HAL_SPI_TransmitReceive+0x68>
 80021f0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80021f4:	2b04      	cmp	r3, #4
 80021f6:	d003      	beq.n	8002200 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80021f8:	2302      	movs	r3, #2
 80021fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80021fe:	e15b      	b.n	80024b8 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d005      	beq.n	8002212 <HAL_SPI_TransmitReceive+0x82>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d002      	beq.n	8002212 <HAL_SPI_TransmitReceive+0x82>
 800220c:	887b      	ldrh	r3, [r7, #2]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d103      	bne.n	800221a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002218:	e14e      	b.n	80024b8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002220:	b2db      	uxtb	r3, r3
 8002222:	2b04      	cmp	r3, #4
 8002224:	d003      	beq.n	800222e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	2205      	movs	r2, #5
 800222a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	2200      	movs	r2, #0
 8002232:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	687a      	ldr	r2, [r7, #4]
 8002238:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	887a      	ldrh	r2, [r7, #2]
 800223e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	887a      	ldrh	r2, [r7, #2]
 8002244:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	68ba      	ldr	r2, [r7, #8]
 800224a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	887a      	ldrh	r2, [r7, #2]
 8002250:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	887a      	ldrh	r2, [r7, #2]
 8002256:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	2200      	movs	r2, #0
 800225c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	2200      	movs	r2, #0
 8002262:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800226e:	2b40      	cmp	r3, #64	; 0x40
 8002270:	d007      	beq.n	8002282 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002280:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	68db      	ldr	r3, [r3, #12]
 8002286:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800228a:	d178      	bne.n	800237e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d002      	beq.n	800229a <HAL_SPI_TransmitReceive+0x10a>
 8002294:	8b7b      	ldrh	r3, [r7, #26]
 8002296:	2b01      	cmp	r3, #1
 8002298:	d166      	bne.n	8002368 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229e:	881a      	ldrh	r2, [r3, #0]
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022aa:	1c9a      	adds	r2, r3, #2
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022b4:	b29b      	uxth	r3, r3
 80022b6:	3b01      	subs	r3, #1
 80022b8:	b29a      	uxth	r2, r3
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80022be:	e053      	b.n	8002368 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	f003 0302 	and.w	r3, r3, #2
 80022ca:	2b02      	cmp	r3, #2
 80022cc:	d11b      	bne.n	8002306 <HAL_SPI_TransmitReceive+0x176>
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022d2:	b29b      	uxth	r3, r3
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d016      	beq.n	8002306 <HAL_SPI_TransmitReceive+0x176>
 80022d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d113      	bne.n	8002306 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e2:	881a      	ldrh	r2, [r3, #0]
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ee:	1c9a      	adds	r2, r3, #2
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022f8:	b29b      	uxth	r3, r3
 80022fa:	3b01      	subs	r3, #1
 80022fc:	b29a      	uxth	r2, r3
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002302:	2300      	movs	r3, #0
 8002304:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	f003 0301 	and.w	r3, r3, #1
 8002310:	2b01      	cmp	r3, #1
 8002312:	d119      	bne.n	8002348 <HAL_SPI_TransmitReceive+0x1b8>
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002318:	b29b      	uxth	r3, r3
 800231a:	2b00      	cmp	r3, #0
 800231c:	d014      	beq.n	8002348 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	68da      	ldr	r2, [r3, #12]
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002328:	b292      	uxth	r2, r2
 800232a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002330:	1c9a      	adds	r2, r3, #2
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800233a:	b29b      	uxth	r3, r3
 800233c:	3b01      	subs	r3, #1
 800233e:	b29a      	uxth	r2, r3
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002344:	2301      	movs	r3, #1
 8002346:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002348:	f7fe fc4a 	bl	8000be0 <HAL_GetTick>
 800234c:	4602      	mov	r2, r0
 800234e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002354:	429a      	cmp	r2, r3
 8002356:	d807      	bhi.n	8002368 <HAL_SPI_TransmitReceive+0x1d8>
 8002358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800235a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800235e:	d003      	beq.n	8002368 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002360:	2303      	movs	r3, #3
 8002362:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002366:	e0a7      	b.n	80024b8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800236c:	b29b      	uxth	r3, r3
 800236e:	2b00      	cmp	r3, #0
 8002370:	d1a6      	bne.n	80022c0 <HAL_SPI_TransmitReceive+0x130>
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002376:	b29b      	uxth	r3, r3
 8002378:	2b00      	cmp	r3, #0
 800237a:	d1a1      	bne.n	80022c0 <HAL_SPI_TransmitReceive+0x130>
 800237c:	e07c      	b.n	8002478 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d002      	beq.n	800238c <HAL_SPI_TransmitReceive+0x1fc>
 8002386:	8b7b      	ldrh	r3, [r7, #26]
 8002388:	2b01      	cmp	r3, #1
 800238a:	d16b      	bne.n	8002464 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	330c      	adds	r3, #12
 8002396:	7812      	ldrb	r2, [r2, #0]
 8002398:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239e:	1c5a      	adds	r2, r3, #1
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023a8:	b29b      	uxth	r3, r3
 80023aa:	3b01      	subs	r3, #1
 80023ac:	b29a      	uxth	r2, r3
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80023b2:	e057      	b.n	8002464 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	f003 0302 	and.w	r3, r3, #2
 80023be:	2b02      	cmp	r3, #2
 80023c0:	d11c      	bne.n	80023fc <HAL_SPI_TransmitReceive+0x26c>
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023c6:	b29b      	uxth	r3, r3
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d017      	beq.n	80023fc <HAL_SPI_TransmitReceive+0x26c>
 80023cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d114      	bne.n	80023fc <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	330c      	adds	r3, #12
 80023dc:	7812      	ldrb	r2, [r2, #0]
 80023de:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e4:	1c5a      	adds	r2, r3, #1
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023ee:	b29b      	uxth	r3, r3
 80023f0:	3b01      	subs	r3, #1
 80023f2:	b29a      	uxth	r2, r3
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80023f8:	2300      	movs	r3, #0
 80023fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	f003 0301 	and.w	r3, r3, #1
 8002406:	2b01      	cmp	r3, #1
 8002408:	d119      	bne.n	800243e <HAL_SPI_TransmitReceive+0x2ae>
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800240e:	b29b      	uxth	r3, r3
 8002410:	2b00      	cmp	r3, #0
 8002412:	d014      	beq.n	800243e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	68da      	ldr	r2, [r3, #12]
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800241e:	b2d2      	uxtb	r2, r2
 8002420:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002426:	1c5a      	adds	r2, r3, #1
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002430:	b29b      	uxth	r3, r3
 8002432:	3b01      	subs	r3, #1
 8002434:	b29a      	uxth	r2, r3
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800243a:	2301      	movs	r3, #1
 800243c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800243e:	f7fe fbcf 	bl	8000be0 <HAL_GetTick>
 8002442:	4602      	mov	r2, r0
 8002444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002446:	1ad3      	subs	r3, r2, r3
 8002448:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800244a:	429a      	cmp	r2, r3
 800244c:	d803      	bhi.n	8002456 <HAL_SPI_TransmitReceive+0x2c6>
 800244e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002450:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002454:	d102      	bne.n	800245c <HAL_SPI_TransmitReceive+0x2cc>
 8002456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002458:	2b00      	cmp	r3, #0
 800245a:	d103      	bne.n	8002464 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800245c:	2303      	movs	r3, #3
 800245e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002462:	e029      	b.n	80024b8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002468:	b29b      	uxth	r3, r3
 800246a:	2b00      	cmp	r3, #0
 800246c:	d1a2      	bne.n	80023b4 <HAL_SPI_TransmitReceive+0x224>
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002472:	b29b      	uxth	r3, r3
 8002474:	2b00      	cmp	r3, #0
 8002476:	d19d      	bne.n	80023b4 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002478:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800247a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800247c:	68f8      	ldr	r0, [r7, #12]
 800247e:	f000 f917 	bl	80026b0 <SPI_EndRxTxTransaction>
 8002482:	4603      	mov	r3, r0
 8002484:	2b00      	cmp	r3, #0
 8002486:	d006      	beq.n	8002496 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	2220      	movs	r2, #32
 8002492:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002494:	e010      	b.n	80024b8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d10b      	bne.n	80024b6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800249e:	2300      	movs	r3, #0
 80024a0:	617b      	str	r3, [r7, #20]
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	617b      	str	r3, [r7, #20]
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	617b      	str	r3, [r7, #20]
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	e000      	b.n	80024b8 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80024b6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	2201      	movs	r2, #1
 80024bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2200      	movs	r2, #0
 80024c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80024c8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	3730      	adds	r7, #48	; 0x30
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}

080024d4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b088      	sub	sp, #32
 80024d8:	af00      	add	r7, sp, #0
 80024da:	60f8      	str	r0, [r7, #12]
 80024dc:	60b9      	str	r1, [r7, #8]
 80024de:	603b      	str	r3, [r7, #0]
 80024e0:	4613      	mov	r3, r2
 80024e2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80024e4:	f7fe fb7c 	bl	8000be0 <HAL_GetTick>
 80024e8:	4602      	mov	r2, r0
 80024ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024ec:	1a9b      	subs	r3, r3, r2
 80024ee:	683a      	ldr	r2, [r7, #0]
 80024f0:	4413      	add	r3, r2
 80024f2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80024f4:	f7fe fb74 	bl	8000be0 <HAL_GetTick>
 80024f8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80024fa:	4b39      	ldr	r3, [pc, #228]	; (80025e0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	015b      	lsls	r3, r3, #5
 8002500:	0d1b      	lsrs	r3, r3, #20
 8002502:	69fa      	ldr	r2, [r7, #28]
 8002504:	fb02 f303 	mul.w	r3, r2, r3
 8002508:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800250a:	e054      	b.n	80025b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002512:	d050      	beq.n	80025b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002514:	f7fe fb64 	bl	8000be0 <HAL_GetTick>
 8002518:	4602      	mov	r2, r0
 800251a:	69bb      	ldr	r3, [r7, #24]
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	69fa      	ldr	r2, [r7, #28]
 8002520:	429a      	cmp	r2, r3
 8002522:	d902      	bls.n	800252a <SPI_WaitFlagStateUntilTimeout+0x56>
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d13d      	bne.n	80025a6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	685a      	ldr	r2, [r3, #4]
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002538:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002542:	d111      	bne.n	8002568 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800254c:	d004      	beq.n	8002558 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002556:	d107      	bne.n	8002568 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002566:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800256c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002570:	d10f      	bne.n	8002592 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002580:	601a      	str	r2, [r3, #0]
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002590:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	2201      	movs	r2, #1
 8002596:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	2200      	movs	r2, #0
 800259e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	e017      	b.n	80025d6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d101      	bne.n	80025b0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80025ac:	2300      	movs	r3, #0
 80025ae:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	3b01      	subs	r3, #1
 80025b4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	689a      	ldr	r2, [r3, #8]
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	4013      	ands	r3, r2
 80025c0:	68ba      	ldr	r2, [r7, #8]
 80025c2:	429a      	cmp	r2, r3
 80025c4:	bf0c      	ite	eq
 80025c6:	2301      	moveq	r3, #1
 80025c8:	2300      	movne	r3, #0
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	461a      	mov	r2, r3
 80025ce:	79fb      	ldrb	r3, [r7, #7]
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d19b      	bne.n	800250c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80025d4:	2300      	movs	r3, #0
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3720      	adds	r7, #32
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	20000000 	.word	0x20000000

080025e4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b086      	sub	sp, #24
 80025e8:	af02      	add	r7, sp, #8
 80025ea:	60f8      	str	r0, [r7, #12]
 80025ec:	60b9      	str	r1, [r7, #8]
 80025ee:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80025f8:	d111      	bne.n	800261e <SPI_EndRxTransaction+0x3a>
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002602:	d004      	beq.n	800260e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800260c:	d107      	bne.n	800261e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800261c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002626:	d12a      	bne.n	800267e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002630:	d012      	beq.n	8002658 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	9300      	str	r3, [sp, #0]
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	2200      	movs	r2, #0
 800263a:	2180      	movs	r1, #128	; 0x80
 800263c:	68f8      	ldr	r0, [r7, #12]
 800263e:	f7ff ff49 	bl	80024d4 <SPI_WaitFlagStateUntilTimeout>
 8002642:	4603      	mov	r3, r0
 8002644:	2b00      	cmp	r3, #0
 8002646:	d02d      	beq.n	80026a4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800264c:	f043 0220 	orr.w	r2, r3, #32
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002654:	2303      	movs	r3, #3
 8002656:	e026      	b.n	80026a6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	9300      	str	r3, [sp, #0]
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	2200      	movs	r2, #0
 8002660:	2101      	movs	r1, #1
 8002662:	68f8      	ldr	r0, [r7, #12]
 8002664:	f7ff ff36 	bl	80024d4 <SPI_WaitFlagStateUntilTimeout>
 8002668:	4603      	mov	r3, r0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d01a      	beq.n	80026a4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002672:	f043 0220 	orr.w	r2, r3, #32
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800267a:	2303      	movs	r3, #3
 800267c:	e013      	b.n	80026a6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	9300      	str	r3, [sp, #0]
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	2200      	movs	r2, #0
 8002686:	2101      	movs	r1, #1
 8002688:	68f8      	ldr	r0, [r7, #12]
 800268a:	f7ff ff23 	bl	80024d4 <SPI_WaitFlagStateUntilTimeout>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d007      	beq.n	80026a4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002698:	f043 0220 	orr.w	r2, r3, #32
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80026a0:	2303      	movs	r3, #3
 80026a2:	e000      	b.n	80026a6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80026a4:	2300      	movs	r3, #0
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3710      	adds	r7, #16
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
	...

080026b0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b088      	sub	sp, #32
 80026b4:	af02      	add	r7, sp, #8
 80026b6:	60f8      	str	r0, [r7, #12]
 80026b8:	60b9      	str	r1, [r7, #8]
 80026ba:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80026bc:	4b1b      	ldr	r3, [pc, #108]	; (800272c <SPI_EndRxTxTransaction+0x7c>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a1b      	ldr	r2, [pc, #108]	; (8002730 <SPI_EndRxTxTransaction+0x80>)
 80026c2:	fba2 2303 	umull	r2, r3, r2, r3
 80026c6:	0d5b      	lsrs	r3, r3, #21
 80026c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80026cc:	fb02 f303 	mul.w	r3, r2, r3
 80026d0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80026da:	d112      	bne.n	8002702 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	9300      	str	r3, [sp, #0]
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	2200      	movs	r2, #0
 80026e4:	2180      	movs	r1, #128	; 0x80
 80026e6:	68f8      	ldr	r0, [r7, #12]
 80026e8:	f7ff fef4 	bl	80024d4 <SPI_WaitFlagStateUntilTimeout>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d016      	beq.n	8002720 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026f6:	f043 0220 	orr.w	r2, r3, #32
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	e00f      	b.n	8002722 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d00a      	beq.n	800271e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	3b01      	subs	r3, #1
 800270c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002718:	2b80      	cmp	r3, #128	; 0x80
 800271a:	d0f2      	beq.n	8002702 <SPI_EndRxTxTransaction+0x52>
 800271c:	e000      	b.n	8002720 <SPI_EndRxTxTransaction+0x70>
        break;
 800271e:	bf00      	nop
  }

  return HAL_OK;
 8002720:	2300      	movs	r3, #0
}
 8002722:	4618      	mov	r0, r3
 8002724:	3718      	adds	r7, #24
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	20000000 	.word	0x20000000
 8002730:	165e9f81 	.word	0x165e9f81

08002734 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b082      	sub	sp, #8
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d101      	bne.n	8002746 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e03f      	b.n	80027c6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800274c:	b2db      	uxtb	r3, r3
 800274e:	2b00      	cmp	r3, #0
 8002750:	d106      	bne.n	8002760 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2200      	movs	r2, #0
 8002756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	f7fe f8f6 	bl	800094c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2224      	movs	r2, #36	; 0x24
 8002764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	68da      	ldr	r2, [r3, #12]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002776:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002778:	6878      	ldr	r0, [r7, #4]
 800277a:	f000 f929 	bl	80029d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	691a      	ldr	r2, [r3, #16]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800278c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	695a      	ldr	r2, [r3, #20]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800279c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	68da      	ldr	r2, [r3, #12]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80027ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2200      	movs	r2, #0
 80027b2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2220      	movs	r2, #32
 80027b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2220      	movs	r2, #32
 80027c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80027c4:	2300      	movs	r3, #0
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3708      	adds	r7, #8
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}

080027ce <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027ce:	b580      	push	{r7, lr}
 80027d0:	b08a      	sub	sp, #40	; 0x28
 80027d2:	af02      	add	r7, sp, #8
 80027d4:	60f8      	str	r0, [r7, #12]
 80027d6:	60b9      	str	r1, [r7, #8]
 80027d8:	603b      	str	r3, [r7, #0]
 80027da:	4613      	mov	r3, r2
 80027dc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80027de:	2300      	movs	r3, #0
 80027e0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	2b20      	cmp	r3, #32
 80027ec:	d17c      	bne.n	80028e8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d002      	beq.n	80027fa <HAL_UART_Transmit+0x2c>
 80027f4:	88fb      	ldrh	r3, [r7, #6]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d101      	bne.n	80027fe <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e075      	b.n	80028ea <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002804:	2b01      	cmp	r3, #1
 8002806:	d101      	bne.n	800280c <HAL_UART_Transmit+0x3e>
 8002808:	2302      	movs	r3, #2
 800280a:	e06e      	b.n	80028ea <HAL_UART_Transmit+0x11c>
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2201      	movs	r2, #1
 8002810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2200      	movs	r2, #0
 8002818:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2221      	movs	r2, #33	; 0x21
 800281e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002822:	f7fe f9dd 	bl	8000be0 <HAL_GetTick>
 8002826:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	88fa      	ldrh	r2, [r7, #6]
 800282c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	88fa      	ldrh	r2, [r7, #6]
 8002832:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800283c:	d108      	bne.n	8002850 <HAL_UART_Transmit+0x82>
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	691b      	ldr	r3, [r3, #16]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d104      	bne.n	8002850 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002846:	2300      	movs	r3, #0
 8002848:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	61bb      	str	r3, [r7, #24]
 800284e:	e003      	b.n	8002858 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002854:	2300      	movs	r3, #0
 8002856:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2200      	movs	r2, #0
 800285c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002860:	e02a      	b.n	80028b8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	9300      	str	r3, [sp, #0]
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	2200      	movs	r2, #0
 800286a:	2180      	movs	r1, #128	; 0x80
 800286c:	68f8      	ldr	r0, [r7, #12]
 800286e:	f000 f840 	bl	80028f2 <UART_WaitOnFlagUntilTimeout>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d001      	beq.n	800287c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002878:	2303      	movs	r3, #3
 800287a:	e036      	b.n	80028ea <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800287c:	69fb      	ldr	r3, [r7, #28]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d10b      	bne.n	800289a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002882:	69bb      	ldr	r3, [r7, #24]
 8002884:	881b      	ldrh	r3, [r3, #0]
 8002886:	461a      	mov	r2, r3
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002890:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002892:	69bb      	ldr	r3, [r7, #24]
 8002894:	3302      	adds	r3, #2
 8002896:	61bb      	str	r3, [r7, #24]
 8002898:	e007      	b.n	80028aa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	781a      	ldrb	r2, [r3, #0]
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	3301      	adds	r3, #1
 80028a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80028ae:	b29b      	uxth	r3, r3
 80028b0:	3b01      	subs	r3, #1
 80028b2:	b29a      	uxth	r2, r3
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80028bc:	b29b      	uxth	r3, r3
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d1cf      	bne.n	8002862 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	9300      	str	r3, [sp, #0]
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	2200      	movs	r2, #0
 80028ca:	2140      	movs	r1, #64	; 0x40
 80028cc:	68f8      	ldr	r0, [r7, #12]
 80028ce:	f000 f810 	bl	80028f2 <UART_WaitOnFlagUntilTimeout>
 80028d2:	4603      	mov	r3, r0
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d001      	beq.n	80028dc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80028d8:	2303      	movs	r3, #3
 80028da:	e006      	b.n	80028ea <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2220      	movs	r2, #32
 80028e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80028e4:	2300      	movs	r3, #0
 80028e6:	e000      	b.n	80028ea <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80028e8:	2302      	movs	r3, #2
  }
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3720      	adds	r7, #32
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}

080028f2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80028f2:	b580      	push	{r7, lr}
 80028f4:	b090      	sub	sp, #64	; 0x40
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	60f8      	str	r0, [r7, #12]
 80028fa:	60b9      	str	r1, [r7, #8]
 80028fc:	603b      	str	r3, [r7, #0]
 80028fe:	4613      	mov	r3, r2
 8002900:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002902:	e050      	b.n	80029a6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002904:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002906:	f1b3 3fff 	cmp.w	r3, #4294967295
 800290a:	d04c      	beq.n	80029a6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800290c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800290e:	2b00      	cmp	r3, #0
 8002910:	d007      	beq.n	8002922 <UART_WaitOnFlagUntilTimeout+0x30>
 8002912:	f7fe f965 	bl	8000be0 <HAL_GetTick>
 8002916:	4602      	mov	r2, r0
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	1ad3      	subs	r3, r2, r3
 800291c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800291e:	429a      	cmp	r2, r3
 8002920:	d241      	bcs.n	80029a6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	330c      	adds	r3, #12
 8002928:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800292a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800292c:	e853 3f00 	ldrex	r3, [r3]
 8002930:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002934:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002938:	63fb      	str	r3, [r7, #60]	; 0x3c
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	330c      	adds	r3, #12
 8002940:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002942:	637a      	str	r2, [r7, #52]	; 0x34
 8002944:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002946:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002948:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800294a:	e841 2300 	strex	r3, r2, [r1]
 800294e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002952:	2b00      	cmp	r3, #0
 8002954:	d1e5      	bne.n	8002922 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	3314      	adds	r3, #20
 800295c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	e853 3f00 	ldrex	r3, [r3]
 8002964:	613b      	str	r3, [r7, #16]
   return(result);
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	f023 0301 	bic.w	r3, r3, #1
 800296c:	63bb      	str	r3, [r7, #56]	; 0x38
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	3314      	adds	r3, #20
 8002974:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002976:	623a      	str	r2, [r7, #32]
 8002978:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800297a:	69f9      	ldr	r1, [r7, #28]
 800297c:	6a3a      	ldr	r2, [r7, #32]
 800297e:	e841 2300 	strex	r3, r2, [r1]
 8002982:	61bb      	str	r3, [r7, #24]
   return(result);
 8002984:	69bb      	ldr	r3, [r7, #24]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d1e5      	bne.n	8002956 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2220      	movs	r2, #32
 800298e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	2220      	movs	r2, #32
 8002996:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2200      	movs	r2, #0
 800299e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80029a2:	2303      	movs	r3, #3
 80029a4:	e00f      	b.n	80029c6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	4013      	ands	r3, r2
 80029b0:	68ba      	ldr	r2, [r7, #8]
 80029b2:	429a      	cmp	r2, r3
 80029b4:	bf0c      	ite	eq
 80029b6:	2301      	moveq	r3, #1
 80029b8:	2300      	movne	r3, #0
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	461a      	mov	r2, r3
 80029be:	79fb      	ldrb	r3, [r7, #7]
 80029c0:	429a      	cmp	r2, r3
 80029c2:	d09f      	beq.n	8002904 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80029c4:	2300      	movs	r3, #0
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3740      	adds	r7, #64	; 0x40
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
	...

080029d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80029d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029d4:	b0c0      	sub	sp, #256	; 0x100
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80029dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	691b      	ldr	r3, [r3, #16]
 80029e4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80029e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029ec:	68d9      	ldr	r1, [r3, #12]
 80029ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	ea40 0301 	orr.w	r3, r0, r1
 80029f8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80029fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029fe:	689a      	ldr	r2, [r3, #8]
 8002a00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a04:	691b      	ldr	r3, [r3, #16]
 8002a06:	431a      	orrs	r2, r3
 8002a08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a0c:	695b      	ldr	r3, [r3, #20]
 8002a0e:	431a      	orrs	r2, r3
 8002a10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a14:	69db      	ldr	r3, [r3, #28]
 8002a16:	4313      	orrs	r3, r2
 8002a18:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002a1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	68db      	ldr	r3, [r3, #12]
 8002a24:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002a28:	f021 010c 	bic.w	r1, r1, #12
 8002a2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002a36:	430b      	orrs	r3, r1
 8002a38:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002a3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	695b      	ldr	r3, [r3, #20]
 8002a42:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002a46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a4a:	6999      	ldr	r1, [r3, #24]
 8002a4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	ea40 0301 	orr.w	r3, r0, r1
 8002a56:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002a58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	4b8f      	ldr	r3, [pc, #572]	; (8002c9c <UART_SetConfig+0x2cc>)
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d005      	beq.n	8002a70 <UART_SetConfig+0xa0>
 8002a64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	4b8d      	ldr	r3, [pc, #564]	; (8002ca0 <UART_SetConfig+0x2d0>)
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d104      	bne.n	8002a7a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002a70:	f7fe fc5c 	bl	800132c <HAL_RCC_GetPCLK2Freq>
 8002a74:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002a78:	e003      	b.n	8002a82 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002a7a:	f7fe fc43 	bl	8001304 <HAL_RCC_GetPCLK1Freq>
 8002a7e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a86:	69db      	ldr	r3, [r3, #28]
 8002a88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a8c:	f040 810c 	bne.w	8002ca8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002a90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a94:	2200      	movs	r2, #0
 8002a96:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002a9a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002a9e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002aa2:	4622      	mov	r2, r4
 8002aa4:	462b      	mov	r3, r5
 8002aa6:	1891      	adds	r1, r2, r2
 8002aa8:	65b9      	str	r1, [r7, #88]	; 0x58
 8002aaa:	415b      	adcs	r3, r3
 8002aac:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002aae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002ab2:	4621      	mov	r1, r4
 8002ab4:	eb12 0801 	adds.w	r8, r2, r1
 8002ab8:	4629      	mov	r1, r5
 8002aba:	eb43 0901 	adc.w	r9, r3, r1
 8002abe:	f04f 0200 	mov.w	r2, #0
 8002ac2:	f04f 0300 	mov.w	r3, #0
 8002ac6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002aca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002ace:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002ad2:	4690      	mov	r8, r2
 8002ad4:	4699      	mov	r9, r3
 8002ad6:	4623      	mov	r3, r4
 8002ad8:	eb18 0303 	adds.w	r3, r8, r3
 8002adc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002ae0:	462b      	mov	r3, r5
 8002ae2:	eb49 0303 	adc.w	r3, r9, r3
 8002ae6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002aea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	2200      	movs	r2, #0
 8002af2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002af6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002afa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002afe:	460b      	mov	r3, r1
 8002b00:	18db      	adds	r3, r3, r3
 8002b02:	653b      	str	r3, [r7, #80]	; 0x50
 8002b04:	4613      	mov	r3, r2
 8002b06:	eb42 0303 	adc.w	r3, r2, r3
 8002b0a:	657b      	str	r3, [r7, #84]	; 0x54
 8002b0c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002b10:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002b14:	f7fd fbcc 	bl	80002b0 <__aeabi_uldivmod>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	460b      	mov	r3, r1
 8002b1c:	4b61      	ldr	r3, [pc, #388]	; (8002ca4 <UART_SetConfig+0x2d4>)
 8002b1e:	fba3 2302 	umull	r2, r3, r3, r2
 8002b22:	095b      	lsrs	r3, r3, #5
 8002b24:	011c      	lsls	r4, r3, #4
 8002b26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002b30:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002b34:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002b38:	4642      	mov	r2, r8
 8002b3a:	464b      	mov	r3, r9
 8002b3c:	1891      	adds	r1, r2, r2
 8002b3e:	64b9      	str	r1, [r7, #72]	; 0x48
 8002b40:	415b      	adcs	r3, r3
 8002b42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b44:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002b48:	4641      	mov	r1, r8
 8002b4a:	eb12 0a01 	adds.w	sl, r2, r1
 8002b4e:	4649      	mov	r1, r9
 8002b50:	eb43 0b01 	adc.w	fp, r3, r1
 8002b54:	f04f 0200 	mov.w	r2, #0
 8002b58:	f04f 0300 	mov.w	r3, #0
 8002b5c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002b60:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002b64:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002b68:	4692      	mov	sl, r2
 8002b6a:	469b      	mov	fp, r3
 8002b6c:	4643      	mov	r3, r8
 8002b6e:	eb1a 0303 	adds.w	r3, sl, r3
 8002b72:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002b76:	464b      	mov	r3, r9
 8002b78:	eb4b 0303 	adc.w	r3, fp, r3
 8002b7c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002b80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	2200      	movs	r2, #0
 8002b88:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002b8c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002b90:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002b94:	460b      	mov	r3, r1
 8002b96:	18db      	adds	r3, r3, r3
 8002b98:	643b      	str	r3, [r7, #64]	; 0x40
 8002b9a:	4613      	mov	r3, r2
 8002b9c:	eb42 0303 	adc.w	r3, r2, r3
 8002ba0:	647b      	str	r3, [r7, #68]	; 0x44
 8002ba2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002ba6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002baa:	f7fd fb81 	bl	80002b0 <__aeabi_uldivmod>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	460b      	mov	r3, r1
 8002bb2:	4611      	mov	r1, r2
 8002bb4:	4b3b      	ldr	r3, [pc, #236]	; (8002ca4 <UART_SetConfig+0x2d4>)
 8002bb6:	fba3 2301 	umull	r2, r3, r3, r1
 8002bba:	095b      	lsrs	r3, r3, #5
 8002bbc:	2264      	movs	r2, #100	; 0x64
 8002bbe:	fb02 f303 	mul.w	r3, r2, r3
 8002bc2:	1acb      	subs	r3, r1, r3
 8002bc4:	00db      	lsls	r3, r3, #3
 8002bc6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002bca:	4b36      	ldr	r3, [pc, #216]	; (8002ca4 <UART_SetConfig+0x2d4>)
 8002bcc:	fba3 2302 	umull	r2, r3, r3, r2
 8002bd0:	095b      	lsrs	r3, r3, #5
 8002bd2:	005b      	lsls	r3, r3, #1
 8002bd4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002bd8:	441c      	add	r4, r3
 8002bda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002bde:	2200      	movs	r2, #0
 8002be0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002be4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002be8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002bec:	4642      	mov	r2, r8
 8002bee:	464b      	mov	r3, r9
 8002bf0:	1891      	adds	r1, r2, r2
 8002bf2:	63b9      	str	r1, [r7, #56]	; 0x38
 8002bf4:	415b      	adcs	r3, r3
 8002bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002bf8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002bfc:	4641      	mov	r1, r8
 8002bfe:	1851      	adds	r1, r2, r1
 8002c00:	6339      	str	r1, [r7, #48]	; 0x30
 8002c02:	4649      	mov	r1, r9
 8002c04:	414b      	adcs	r3, r1
 8002c06:	637b      	str	r3, [r7, #52]	; 0x34
 8002c08:	f04f 0200 	mov.w	r2, #0
 8002c0c:	f04f 0300 	mov.w	r3, #0
 8002c10:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002c14:	4659      	mov	r1, fp
 8002c16:	00cb      	lsls	r3, r1, #3
 8002c18:	4651      	mov	r1, sl
 8002c1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c1e:	4651      	mov	r1, sl
 8002c20:	00ca      	lsls	r2, r1, #3
 8002c22:	4610      	mov	r0, r2
 8002c24:	4619      	mov	r1, r3
 8002c26:	4603      	mov	r3, r0
 8002c28:	4642      	mov	r2, r8
 8002c2a:	189b      	adds	r3, r3, r2
 8002c2c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002c30:	464b      	mov	r3, r9
 8002c32:	460a      	mov	r2, r1
 8002c34:	eb42 0303 	adc.w	r3, r2, r3
 8002c38:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002c3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	2200      	movs	r2, #0
 8002c44:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002c48:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002c4c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002c50:	460b      	mov	r3, r1
 8002c52:	18db      	adds	r3, r3, r3
 8002c54:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c56:	4613      	mov	r3, r2
 8002c58:	eb42 0303 	adc.w	r3, r2, r3
 8002c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c5e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002c62:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002c66:	f7fd fb23 	bl	80002b0 <__aeabi_uldivmod>
 8002c6a:	4602      	mov	r2, r0
 8002c6c:	460b      	mov	r3, r1
 8002c6e:	4b0d      	ldr	r3, [pc, #52]	; (8002ca4 <UART_SetConfig+0x2d4>)
 8002c70:	fba3 1302 	umull	r1, r3, r3, r2
 8002c74:	095b      	lsrs	r3, r3, #5
 8002c76:	2164      	movs	r1, #100	; 0x64
 8002c78:	fb01 f303 	mul.w	r3, r1, r3
 8002c7c:	1ad3      	subs	r3, r2, r3
 8002c7e:	00db      	lsls	r3, r3, #3
 8002c80:	3332      	adds	r3, #50	; 0x32
 8002c82:	4a08      	ldr	r2, [pc, #32]	; (8002ca4 <UART_SetConfig+0x2d4>)
 8002c84:	fba2 2303 	umull	r2, r3, r2, r3
 8002c88:	095b      	lsrs	r3, r3, #5
 8002c8a:	f003 0207 	and.w	r2, r3, #7
 8002c8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4422      	add	r2, r4
 8002c96:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002c98:	e105      	b.n	8002ea6 <UART_SetConfig+0x4d6>
 8002c9a:	bf00      	nop
 8002c9c:	40011000 	.word	0x40011000
 8002ca0:	40011400 	.word	0x40011400
 8002ca4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002ca8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002cac:	2200      	movs	r2, #0
 8002cae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002cb2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002cb6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002cba:	4642      	mov	r2, r8
 8002cbc:	464b      	mov	r3, r9
 8002cbe:	1891      	adds	r1, r2, r2
 8002cc0:	6239      	str	r1, [r7, #32]
 8002cc2:	415b      	adcs	r3, r3
 8002cc4:	627b      	str	r3, [r7, #36]	; 0x24
 8002cc6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002cca:	4641      	mov	r1, r8
 8002ccc:	1854      	adds	r4, r2, r1
 8002cce:	4649      	mov	r1, r9
 8002cd0:	eb43 0501 	adc.w	r5, r3, r1
 8002cd4:	f04f 0200 	mov.w	r2, #0
 8002cd8:	f04f 0300 	mov.w	r3, #0
 8002cdc:	00eb      	lsls	r3, r5, #3
 8002cde:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ce2:	00e2      	lsls	r2, r4, #3
 8002ce4:	4614      	mov	r4, r2
 8002ce6:	461d      	mov	r5, r3
 8002ce8:	4643      	mov	r3, r8
 8002cea:	18e3      	adds	r3, r4, r3
 8002cec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002cf0:	464b      	mov	r3, r9
 8002cf2:	eb45 0303 	adc.w	r3, r5, r3
 8002cf6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002cfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	2200      	movs	r2, #0
 8002d02:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002d06:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002d0a:	f04f 0200 	mov.w	r2, #0
 8002d0e:	f04f 0300 	mov.w	r3, #0
 8002d12:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002d16:	4629      	mov	r1, r5
 8002d18:	008b      	lsls	r3, r1, #2
 8002d1a:	4621      	mov	r1, r4
 8002d1c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d20:	4621      	mov	r1, r4
 8002d22:	008a      	lsls	r2, r1, #2
 8002d24:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002d28:	f7fd fac2 	bl	80002b0 <__aeabi_uldivmod>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	460b      	mov	r3, r1
 8002d30:	4b60      	ldr	r3, [pc, #384]	; (8002eb4 <UART_SetConfig+0x4e4>)
 8002d32:	fba3 2302 	umull	r2, r3, r3, r2
 8002d36:	095b      	lsrs	r3, r3, #5
 8002d38:	011c      	lsls	r4, r3, #4
 8002d3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d3e:	2200      	movs	r2, #0
 8002d40:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002d44:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002d48:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002d4c:	4642      	mov	r2, r8
 8002d4e:	464b      	mov	r3, r9
 8002d50:	1891      	adds	r1, r2, r2
 8002d52:	61b9      	str	r1, [r7, #24]
 8002d54:	415b      	adcs	r3, r3
 8002d56:	61fb      	str	r3, [r7, #28]
 8002d58:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d5c:	4641      	mov	r1, r8
 8002d5e:	1851      	adds	r1, r2, r1
 8002d60:	6139      	str	r1, [r7, #16]
 8002d62:	4649      	mov	r1, r9
 8002d64:	414b      	adcs	r3, r1
 8002d66:	617b      	str	r3, [r7, #20]
 8002d68:	f04f 0200 	mov.w	r2, #0
 8002d6c:	f04f 0300 	mov.w	r3, #0
 8002d70:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002d74:	4659      	mov	r1, fp
 8002d76:	00cb      	lsls	r3, r1, #3
 8002d78:	4651      	mov	r1, sl
 8002d7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d7e:	4651      	mov	r1, sl
 8002d80:	00ca      	lsls	r2, r1, #3
 8002d82:	4610      	mov	r0, r2
 8002d84:	4619      	mov	r1, r3
 8002d86:	4603      	mov	r3, r0
 8002d88:	4642      	mov	r2, r8
 8002d8a:	189b      	adds	r3, r3, r2
 8002d8c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002d90:	464b      	mov	r3, r9
 8002d92:	460a      	mov	r2, r1
 8002d94:	eb42 0303 	adc.w	r3, r2, r3
 8002d98:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002d9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	2200      	movs	r2, #0
 8002da4:	67bb      	str	r3, [r7, #120]	; 0x78
 8002da6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002da8:	f04f 0200 	mov.w	r2, #0
 8002dac:	f04f 0300 	mov.w	r3, #0
 8002db0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002db4:	4649      	mov	r1, r9
 8002db6:	008b      	lsls	r3, r1, #2
 8002db8:	4641      	mov	r1, r8
 8002dba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002dbe:	4641      	mov	r1, r8
 8002dc0:	008a      	lsls	r2, r1, #2
 8002dc2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002dc6:	f7fd fa73 	bl	80002b0 <__aeabi_uldivmod>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	460b      	mov	r3, r1
 8002dce:	4b39      	ldr	r3, [pc, #228]	; (8002eb4 <UART_SetConfig+0x4e4>)
 8002dd0:	fba3 1302 	umull	r1, r3, r3, r2
 8002dd4:	095b      	lsrs	r3, r3, #5
 8002dd6:	2164      	movs	r1, #100	; 0x64
 8002dd8:	fb01 f303 	mul.w	r3, r1, r3
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	011b      	lsls	r3, r3, #4
 8002de0:	3332      	adds	r3, #50	; 0x32
 8002de2:	4a34      	ldr	r2, [pc, #208]	; (8002eb4 <UART_SetConfig+0x4e4>)
 8002de4:	fba2 2303 	umull	r2, r3, r2, r3
 8002de8:	095b      	lsrs	r3, r3, #5
 8002dea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002dee:	441c      	add	r4, r3
 8002df0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002df4:	2200      	movs	r2, #0
 8002df6:	673b      	str	r3, [r7, #112]	; 0x70
 8002df8:	677a      	str	r2, [r7, #116]	; 0x74
 8002dfa:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002dfe:	4642      	mov	r2, r8
 8002e00:	464b      	mov	r3, r9
 8002e02:	1891      	adds	r1, r2, r2
 8002e04:	60b9      	str	r1, [r7, #8]
 8002e06:	415b      	adcs	r3, r3
 8002e08:	60fb      	str	r3, [r7, #12]
 8002e0a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e0e:	4641      	mov	r1, r8
 8002e10:	1851      	adds	r1, r2, r1
 8002e12:	6039      	str	r1, [r7, #0]
 8002e14:	4649      	mov	r1, r9
 8002e16:	414b      	adcs	r3, r1
 8002e18:	607b      	str	r3, [r7, #4]
 8002e1a:	f04f 0200 	mov.w	r2, #0
 8002e1e:	f04f 0300 	mov.w	r3, #0
 8002e22:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002e26:	4659      	mov	r1, fp
 8002e28:	00cb      	lsls	r3, r1, #3
 8002e2a:	4651      	mov	r1, sl
 8002e2c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e30:	4651      	mov	r1, sl
 8002e32:	00ca      	lsls	r2, r1, #3
 8002e34:	4610      	mov	r0, r2
 8002e36:	4619      	mov	r1, r3
 8002e38:	4603      	mov	r3, r0
 8002e3a:	4642      	mov	r2, r8
 8002e3c:	189b      	adds	r3, r3, r2
 8002e3e:	66bb      	str	r3, [r7, #104]	; 0x68
 8002e40:	464b      	mov	r3, r9
 8002e42:	460a      	mov	r2, r1
 8002e44:	eb42 0303 	adc.w	r3, r2, r3
 8002e48:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002e4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	663b      	str	r3, [r7, #96]	; 0x60
 8002e54:	667a      	str	r2, [r7, #100]	; 0x64
 8002e56:	f04f 0200 	mov.w	r2, #0
 8002e5a:	f04f 0300 	mov.w	r3, #0
 8002e5e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002e62:	4649      	mov	r1, r9
 8002e64:	008b      	lsls	r3, r1, #2
 8002e66:	4641      	mov	r1, r8
 8002e68:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e6c:	4641      	mov	r1, r8
 8002e6e:	008a      	lsls	r2, r1, #2
 8002e70:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002e74:	f7fd fa1c 	bl	80002b0 <__aeabi_uldivmod>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	460b      	mov	r3, r1
 8002e7c:	4b0d      	ldr	r3, [pc, #52]	; (8002eb4 <UART_SetConfig+0x4e4>)
 8002e7e:	fba3 1302 	umull	r1, r3, r3, r2
 8002e82:	095b      	lsrs	r3, r3, #5
 8002e84:	2164      	movs	r1, #100	; 0x64
 8002e86:	fb01 f303 	mul.w	r3, r1, r3
 8002e8a:	1ad3      	subs	r3, r2, r3
 8002e8c:	011b      	lsls	r3, r3, #4
 8002e8e:	3332      	adds	r3, #50	; 0x32
 8002e90:	4a08      	ldr	r2, [pc, #32]	; (8002eb4 <UART_SetConfig+0x4e4>)
 8002e92:	fba2 2303 	umull	r2, r3, r2, r3
 8002e96:	095b      	lsrs	r3, r3, #5
 8002e98:	f003 020f 	and.w	r2, r3, #15
 8002e9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4422      	add	r2, r4
 8002ea4:	609a      	str	r2, [r3, #8]
}
 8002ea6:	bf00      	nop
 8002ea8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002eac:	46bd      	mov	sp, r7
 8002eae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002eb2:	bf00      	nop
 8002eb4:	51eb851f 	.word	0x51eb851f

08002eb8 <__errno>:
 8002eb8:	4b01      	ldr	r3, [pc, #4]	; (8002ec0 <__errno+0x8>)
 8002eba:	6818      	ldr	r0, [r3, #0]
 8002ebc:	4770      	bx	lr
 8002ebe:	bf00      	nop
 8002ec0:	2000000c 	.word	0x2000000c

08002ec4 <__libc_init_array>:
 8002ec4:	b570      	push	{r4, r5, r6, lr}
 8002ec6:	4d0d      	ldr	r5, [pc, #52]	; (8002efc <__libc_init_array+0x38>)
 8002ec8:	4c0d      	ldr	r4, [pc, #52]	; (8002f00 <__libc_init_array+0x3c>)
 8002eca:	1b64      	subs	r4, r4, r5
 8002ecc:	10a4      	asrs	r4, r4, #2
 8002ece:	2600      	movs	r6, #0
 8002ed0:	42a6      	cmp	r6, r4
 8002ed2:	d109      	bne.n	8002ee8 <__libc_init_array+0x24>
 8002ed4:	4d0b      	ldr	r5, [pc, #44]	; (8002f04 <__libc_init_array+0x40>)
 8002ed6:	4c0c      	ldr	r4, [pc, #48]	; (8002f08 <__libc_init_array+0x44>)
 8002ed8:	f000 fc8e 	bl	80037f8 <_init>
 8002edc:	1b64      	subs	r4, r4, r5
 8002ede:	10a4      	asrs	r4, r4, #2
 8002ee0:	2600      	movs	r6, #0
 8002ee2:	42a6      	cmp	r6, r4
 8002ee4:	d105      	bne.n	8002ef2 <__libc_init_array+0x2e>
 8002ee6:	bd70      	pop	{r4, r5, r6, pc}
 8002ee8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002eec:	4798      	blx	r3
 8002eee:	3601      	adds	r6, #1
 8002ef0:	e7ee      	b.n	8002ed0 <__libc_init_array+0xc>
 8002ef2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ef6:	4798      	blx	r3
 8002ef8:	3601      	adds	r6, #1
 8002efa:	e7f2      	b.n	8002ee2 <__libc_init_array+0x1e>
 8002efc:	08003880 	.word	0x08003880
 8002f00:	08003880 	.word	0x08003880
 8002f04:	08003880 	.word	0x08003880
 8002f08:	08003884 	.word	0x08003884

08002f0c <memset>:
 8002f0c:	4402      	add	r2, r0
 8002f0e:	4603      	mov	r3, r0
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d100      	bne.n	8002f16 <memset+0xa>
 8002f14:	4770      	bx	lr
 8002f16:	f803 1b01 	strb.w	r1, [r3], #1
 8002f1a:	e7f9      	b.n	8002f10 <memset+0x4>

08002f1c <siprintf>:
 8002f1c:	b40e      	push	{r1, r2, r3}
 8002f1e:	b500      	push	{lr}
 8002f20:	b09c      	sub	sp, #112	; 0x70
 8002f22:	ab1d      	add	r3, sp, #116	; 0x74
 8002f24:	9002      	str	r0, [sp, #8]
 8002f26:	9006      	str	r0, [sp, #24]
 8002f28:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002f2c:	4809      	ldr	r0, [pc, #36]	; (8002f54 <siprintf+0x38>)
 8002f2e:	9107      	str	r1, [sp, #28]
 8002f30:	9104      	str	r1, [sp, #16]
 8002f32:	4909      	ldr	r1, [pc, #36]	; (8002f58 <siprintf+0x3c>)
 8002f34:	f853 2b04 	ldr.w	r2, [r3], #4
 8002f38:	9105      	str	r1, [sp, #20]
 8002f3a:	6800      	ldr	r0, [r0, #0]
 8002f3c:	9301      	str	r3, [sp, #4]
 8002f3e:	a902      	add	r1, sp, #8
 8002f40:	f000 f868 	bl	8003014 <_svfiprintf_r>
 8002f44:	9b02      	ldr	r3, [sp, #8]
 8002f46:	2200      	movs	r2, #0
 8002f48:	701a      	strb	r2, [r3, #0]
 8002f4a:	b01c      	add	sp, #112	; 0x70
 8002f4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002f50:	b003      	add	sp, #12
 8002f52:	4770      	bx	lr
 8002f54:	2000000c 	.word	0x2000000c
 8002f58:	ffff0208 	.word	0xffff0208

08002f5c <__ssputs_r>:
 8002f5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f60:	688e      	ldr	r6, [r1, #8]
 8002f62:	429e      	cmp	r6, r3
 8002f64:	4682      	mov	sl, r0
 8002f66:	460c      	mov	r4, r1
 8002f68:	4690      	mov	r8, r2
 8002f6a:	461f      	mov	r7, r3
 8002f6c:	d838      	bhi.n	8002fe0 <__ssputs_r+0x84>
 8002f6e:	898a      	ldrh	r2, [r1, #12]
 8002f70:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002f74:	d032      	beq.n	8002fdc <__ssputs_r+0x80>
 8002f76:	6825      	ldr	r5, [r4, #0]
 8002f78:	6909      	ldr	r1, [r1, #16]
 8002f7a:	eba5 0901 	sub.w	r9, r5, r1
 8002f7e:	6965      	ldr	r5, [r4, #20]
 8002f80:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002f84:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002f88:	3301      	adds	r3, #1
 8002f8a:	444b      	add	r3, r9
 8002f8c:	106d      	asrs	r5, r5, #1
 8002f8e:	429d      	cmp	r5, r3
 8002f90:	bf38      	it	cc
 8002f92:	461d      	movcc	r5, r3
 8002f94:	0553      	lsls	r3, r2, #21
 8002f96:	d531      	bpl.n	8002ffc <__ssputs_r+0xa0>
 8002f98:	4629      	mov	r1, r5
 8002f9a:	f000 fb63 	bl	8003664 <_malloc_r>
 8002f9e:	4606      	mov	r6, r0
 8002fa0:	b950      	cbnz	r0, 8002fb8 <__ssputs_r+0x5c>
 8002fa2:	230c      	movs	r3, #12
 8002fa4:	f8ca 3000 	str.w	r3, [sl]
 8002fa8:	89a3      	ldrh	r3, [r4, #12]
 8002faa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002fae:	81a3      	strh	r3, [r4, #12]
 8002fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8002fb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002fb8:	6921      	ldr	r1, [r4, #16]
 8002fba:	464a      	mov	r2, r9
 8002fbc:	f000 fabe 	bl	800353c <memcpy>
 8002fc0:	89a3      	ldrh	r3, [r4, #12]
 8002fc2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002fc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fca:	81a3      	strh	r3, [r4, #12]
 8002fcc:	6126      	str	r6, [r4, #16]
 8002fce:	6165      	str	r5, [r4, #20]
 8002fd0:	444e      	add	r6, r9
 8002fd2:	eba5 0509 	sub.w	r5, r5, r9
 8002fd6:	6026      	str	r6, [r4, #0]
 8002fd8:	60a5      	str	r5, [r4, #8]
 8002fda:	463e      	mov	r6, r7
 8002fdc:	42be      	cmp	r6, r7
 8002fde:	d900      	bls.n	8002fe2 <__ssputs_r+0x86>
 8002fe0:	463e      	mov	r6, r7
 8002fe2:	6820      	ldr	r0, [r4, #0]
 8002fe4:	4632      	mov	r2, r6
 8002fe6:	4641      	mov	r1, r8
 8002fe8:	f000 fab6 	bl	8003558 <memmove>
 8002fec:	68a3      	ldr	r3, [r4, #8]
 8002fee:	1b9b      	subs	r3, r3, r6
 8002ff0:	60a3      	str	r3, [r4, #8]
 8002ff2:	6823      	ldr	r3, [r4, #0]
 8002ff4:	4433      	add	r3, r6
 8002ff6:	6023      	str	r3, [r4, #0]
 8002ff8:	2000      	movs	r0, #0
 8002ffa:	e7db      	b.n	8002fb4 <__ssputs_r+0x58>
 8002ffc:	462a      	mov	r2, r5
 8002ffe:	f000 fba5 	bl	800374c <_realloc_r>
 8003002:	4606      	mov	r6, r0
 8003004:	2800      	cmp	r0, #0
 8003006:	d1e1      	bne.n	8002fcc <__ssputs_r+0x70>
 8003008:	6921      	ldr	r1, [r4, #16]
 800300a:	4650      	mov	r0, sl
 800300c:	f000 fabe 	bl	800358c <_free_r>
 8003010:	e7c7      	b.n	8002fa2 <__ssputs_r+0x46>
	...

08003014 <_svfiprintf_r>:
 8003014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003018:	4698      	mov	r8, r3
 800301a:	898b      	ldrh	r3, [r1, #12]
 800301c:	061b      	lsls	r3, r3, #24
 800301e:	b09d      	sub	sp, #116	; 0x74
 8003020:	4607      	mov	r7, r0
 8003022:	460d      	mov	r5, r1
 8003024:	4614      	mov	r4, r2
 8003026:	d50e      	bpl.n	8003046 <_svfiprintf_r+0x32>
 8003028:	690b      	ldr	r3, [r1, #16]
 800302a:	b963      	cbnz	r3, 8003046 <_svfiprintf_r+0x32>
 800302c:	2140      	movs	r1, #64	; 0x40
 800302e:	f000 fb19 	bl	8003664 <_malloc_r>
 8003032:	6028      	str	r0, [r5, #0]
 8003034:	6128      	str	r0, [r5, #16]
 8003036:	b920      	cbnz	r0, 8003042 <_svfiprintf_r+0x2e>
 8003038:	230c      	movs	r3, #12
 800303a:	603b      	str	r3, [r7, #0]
 800303c:	f04f 30ff 	mov.w	r0, #4294967295
 8003040:	e0d1      	b.n	80031e6 <_svfiprintf_r+0x1d2>
 8003042:	2340      	movs	r3, #64	; 0x40
 8003044:	616b      	str	r3, [r5, #20]
 8003046:	2300      	movs	r3, #0
 8003048:	9309      	str	r3, [sp, #36]	; 0x24
 800304a:	2320      	movs	r3, #32
 800304c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003050:	f8cd 800c 	str.w	r8, [sp, #12]
 8003054:	2330      	movs	r3, #48	; 0x30
 8003056:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003200 <_svfiprintf_r+0x1ec>
 800305a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800305e:	f04f 0901 	mov.w	r9, #1
 8003062:	4623      	mov	r3, r4
 8003064:	469a      	mov	sl, r3
 8003066:	f813 2b01 	ldrb.w	r2, [r3], #1
 800306a:	b10a      	cbz	r2, 8003070 <_svfiprintf_r+0x5c>
 800306c:	2a25      	cmp	r2, #37	; 0x25
 800306e:	d1f9      	bne.n	8003064 <_svfiprintf_r+0x50>
 8003070:	ebba 0b04 	subs.w	fp, sl, r4
 8003074:	d00b      	beq.n	800308e <_svfiprintf_r+0x7a>
 8003076:	465b      	mov	r3, fp
 8003078:	4622      	mov	r2, r4
 800307a:	4629      	mov	r1, r5
 800307c:	4638      	mov	r0, r7
 800307e:	f7ff ff6d 	bl	8002f5c <__ssputs_r>
 8003082:	3001      	adds	r0, #1
 8003084:	f000 80aa 	beq.w	80031dc <_svfiprintf_r+0x1c8>
 8003088:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800308a:	445a      	add	r2, fp
 800308c:	9209      	str	r2, [sp, #36]	; 0x24
 800308e:	f89a 3000 	ldrb.w	r3, [sl]
 8003092:	2b00      	cmp	r3, #0
 8003094:	f000 80a2 	beq.w	80031dc <_svfiprintf_r+0x1c8>
 8003098:	2300      	movs	r3, #0
 800309a:	f04f 32ff 	mov.w	r2, #4294967295
 800309e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80030a2:	f10a 0a01 	add.w	sl, sl, #1
 80030a6:	9304      	str	r3, [sp, #16]
 80030a8:	9307      	str	r3, [sp, #28]
 80030aa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80030ae:	931a      	str	r3, [sp, #104]	; 0x68
 80030b0:	4654      	mov	r4, sl
 80030b2:	2205      	movs	r2, #5
 80030b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80030b8:	4851      	ldr	r0, [pc, #324]	; (8003200 <_svfiprintf_r+0x1ec>)
 80030ba:	f7fd f8a9 	bl	8000210 <memchr>
 80030be:	9a04      	ldr	r2, [sp, #16]
 80030c0:	b9d8      	cbnz	r0, 80030fa <_svfiprintf_r+0xe6>
 80030c2:	06d0      	lsls	r0, r2, #27
 80030c4:	bf44      	itt	mi
 80030c6:	2320      	movmi	r3, #32
 80030c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80030cc:	0711      	lsls	r1, r2, #28
 80030ce:	bf44      	itt	mi
 80030d0:	232b      	movmi	r3, #43	; 0x2b
 80030d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80030d6:	f89a 3000 	ldrb.w	r3, [sl]
 80030da:	2b2a      	cmp	r3, #42	; 0x2a
 80030dc:	d015      	beq.n	800310a <_svfiprintf_r+0xf6>
 80030de:	9a07      	ldr	r2, [sp, #28]
 80030e0:	4654      	mov	r4, sl
 80030e2:	2000      	movs	r0, #0
 80030e4:	f04f 0c0a 	mov.w	ip, #10
 80030e8:	4621      	mov	r1, r4
 80030ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80030ee:	3b30      	subs	r3, #48	; 0x30
 80030f0:	2b09      	cmp	r3, #9
 80030f2:	d94e      	bls.n	8003192 <_svfiprintf_r+0x17e>
 80030f4:	b1b0      	cbz	r0, 8003124 <_svfiprintf_r+0x110>
 80030f6:	9207      	str	r2, [sp, #28]
 80030f8:	e014      	b.n	8003124 <_svfiprintf_r+0x110>
 80030fa:	eba0 0308 	sub.w	r3, r0, r8
 80030fe:	fa09 f303 	lsl.w	r3, r9, r3
 8003102:	4313      	orrs	r3, r2
 8003104:	9304      	str	r3, [sp, #16]
 8003106:	46a2      	mov	sl, r4
 8003108:	e7d2      	b.n	80030b0 <_svfiprintf_r+0x9c>
 800310a:	9b03      	ldr	r3, [sp, #12]
 800310c:	1d19      	adds	r1, r3, #4
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	9103      	str	r1, [sp, #12]
 8003112:	2b00      	cmp	r3, #0
 8003114:	bfbb      	ittet	lt
 8003116:	425b      	neglt	r3, r3
 8003118:	f042 0202 	orrlt.w	r2, r2, #2
 800311c:	9307      	strge	r3, [sp, #28]
 800311e:	9307      	strlt	r3, [sp, #28]
 8003120:	bfb8      	it	lt
 8003122:	9204      	strlt	r2, [sp, #16]
 8003124:	7823      	ldrb	r3, [r4, #0]
 8003126:	2b2e      	cmp	r3, #46	; 0x2e
 8003128:	d10c      	bne.n	8003144 <_svfiprintf_r+0x130>
 800312a:	7863      	ldrb	r3, [r4, #1]
 800312c:	2b2a      	cmp	r3, #42	; 0x2a
 800312e:	d135      	bne.n	800319c <_svfiprintf_r+0x188>
 8003130:	9b03      	ldr	r3, [sp, #12]
 8003132:	1d1a      	adds	r2, r3, #4
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	9203      	str	r2, [sp, #12]
 8003138:	2b00      	cmp	r3, #0
 800313a:	bfb8      	it	lt
 800313c:	f04f 33ff 	movlt.w	r3, #4294967295
 8003140:	3402      	adds	r4, #2
 8003142:	9305      	str	r3, [sp, #20]
 8003144:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003210 <_svfiprintf_r+0x1fc>
 8003148:	7821      	ldrb	r1, [r4, #0]
 800314a:	2203      	movs	r2, #3
 800314c:	4650      	mov	r0, sl
 800314e:	f7fd f85f 	bl	8000210 <memchr>
 8003152:	b140      	cbz	r0, 8003166 <_svfiprintf_r+0x152>
 8003154:	2340      	movs	r3, #64	; 0x40
 8003156:	eba0 000a 	sub.w	r0, r0, sl
 800315a:	fa03 f000 	lsl.w	r0, r3, r0
 800315e:	9b04      	ldr	r3, [sp, #16]
 8003160:	4303      	orrs	r3, r0
 8003162:	3401      	adds	r4, #1
 8003164:	9304      	str	r3, [sp, #16]
 8003166:	f814 1b01 	ldrb.w	r1, [r4], #1
 800316a:	4826      	ldr	r0, [pc, #152]	; (8003204 <_svfiprintf_r+0x1f0>)
 800316c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003170:	2206      	movs	r2, #6
 8003172:	f7fd f84d 	bl	8000210 <memchr>
 8003176:	2800      	cmp	r0, #0
 8003178:	d038      	beq.n	80031ec <_svfiprintf_r+0x1d8>
 800317a:	4b23      	ldr	r3, [pc, #140]	; (8003208 <_svfiprintf_r+0x1f4>)
 800317c:	bb1b      	cbnz	r3, 80031c6 <_svfiprintf_r+0x1b2>
 800317e:	9b03      	ldr	r3, [sp, #12]
 8003180:	3307      	adds	r3, #7
 8003182:	f023 0307 	bic.w	r3, r3, #7
 8003186:	3308      	adds	r3, #8
 8003188:	9303      	str	r3, [sp, #12]
 800318a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800318c:	4433      	add	r3, r6
 800318e:	9309      	str	r3, [sp, #36]	; 0x24
 8003190:	e767      	b.n	8003062 <_svfiprintf_r+0x4e>
 8003192:	fb0c 3202 	mla	r2, ip, r2, r3
 8003196:	460c      	mov	r4, r1
 8003198:	2001      	movs	r0, #1
 800319a:	e7a5      	b.n	80030e8 <_svfiprintf_r+0xd4>
 800319c:	2300      	movs	r3, #0
 800319e:	3401      	adds	r4, #1
 80031a0:	9305      	str	r3, [sp, #20]
 80031a2:	4619      	mov	r1, r3
 80031a4:	f04f 0c0a 	mov.w	ip, #10
 80031a8:	4620      	mov	r0, r4
 80031aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80031ae:	3a30      	subs	r2, #48	; 0x30
 80031b0:	2a09      	cmp	r2, #9
 80031b2:	d903      	bls.n	80031bc <_svfiprintf_r+0x1a8>
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d0c5      	beq.n	8003144 <_svfiprintf_r+0x130>
 80031b8:	9105      	str	r1, [sp, #20]
 80031ba:	e7c3      	b.n	8003144 <_svfiprintf_r+0x130>
 80031bc:	fb0c 2101 	mla	r1, ip, r1, r2
 80031c0:	4604      	mov	r4, r0
 80031c2:	2301      	movs	r3, #1
 80031c4:	e7f0      	b.n	80031a8 <_svfiprintf_r+0x194>
 80031c6:	ab03      	add	r3, sp, #12
 80031c8:	9300      	str	r3, [sp, #0]
 80031ca:	462a      	mov	r2, r5
 80031cc:	4b0f      	ldr	r3, [pc, #60]	; (800320c <_svfiprintf_r+0x1f8>)
 80031ce:	a904      	add	r1, sp, #16
 80031d0:	4638      	mov	r0, r7
 80031d2:	f3af 8000 	nop.w
 80031d6:	1c42      	adds	r2, r0, #1
 80031d8:	4606      	mov	r6, r0
 80031da:	d1d6      	bne.n	800318a <_svfiprintf_r+0x176>
 80031dc:	89ab      	ldrh	r3, [r5, #12]
 80031de:	065b      	lsls	r3, r3, #25
 80031e0:	f53f af2c 	bmi.w	800303c <_svfiprintf_r+0x28>
 80031e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80031e6:	b01d      	add	sp, #116	; 0x74
 80031e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80031ec:	ab03      	add	r3, sp, #12
 80031ee:	9300      	str	r3, [sp, #0]
 80031f0:	462a      	mov	r2, r5
 80031f2:	4b06      	ldr	r3, [pc, #24]	; (800320c <_svfiprintf_r+0x1f8>)
 80031f4:	a904      	add	r1, sp, #16
 80031f6:	4638      	mov	r0, r7
 80031f8:	f000 f87a 	bl	80032f0 <_printf_i>
 80031fc:	e7eb      	b.n	80031d6 <_svfiprintf_r+0x1c2>
 80031fe:	bf00      	nop
 8003200:	08003844 	.word	0x08003844
 8003204:	0800384e 	.word	0x0800384e
 8003208:	00000000 	.word	0x00000000
 800320c:	08002f5d 	.word	0x08002f5d
 8003210:	0800384a 	.word	0x0800384a

08003214 <_printf_common>:
 8003214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003218:	4616      	mov	r6, r2
 800321a:	4699      	mov	r9, r3
 800321c:	688a      	ldr	r2, [r1, #8]
 800321e:	690b      	ldr	r3, [r1, #16]
 8003220:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003224:	4293      	cmp	r3, r2
 8003226:	bfb8      	it	lt
 8003228:	4613      	movlt	r3, r2
 800322a:	6033      	str	r3, [r6, #0]
 800322c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003230:	4607      	mov	r7, r0
 8003232:	460c      	mov	r4, r1
 8003234:	b10a      	cbz	r2, 800323a <_printf_common+0x26>
 8003236:	3301      	adds	r3, #1
 8003238:	6033      	str	r3, [r6, #0]
 800323a:	6823      	ldr	r3, [r4, #0]
 800323c:	0699      	lsls	r1, r3, #26
 800323e:	bf42      	ittt	mi
 8003240:	6833      	ldrmi	r3, [r6, #0]
 8003242:	3302      	addmi	r3, #2
 8003244:	6033      	strmi	r3, [r6, #0]
 8003246:	6825      	ldr	r5, [r4, #0]
 8003248:	f015 0506 	ands.w	r5, r5, #6
 800324c:	d106      	bne.n	800325c <_printf_common+0x48>
 800324e:	f104 0a19 	add.w	sl, r4, #25
 8003252:	68e3      	ldr	r3, [r4, #12]
 8003254:	6832      	ldr	r2, [r6, #0]
 8003256:	1a9b      	subs	r3, r3, r2
 8003258:	42ab      	cmp	r3, r5
 800325a:	dc26      	bgt.n	80032aa <_printf_common+0x96>
 800325c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003260:	1e13      	subs	r3, r2, #0
 8003262:	6822      	ldr	r2, [r4, #0]
 8003264:	bf18      	it	ne
 8003266:	2301      	movne	r3, #1
 8003268:	0692      	lsls	r2, r2, #26
 800326a:	d42b      	bmi.n	80032c4 <_printf_common+0xb0>
 800326c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003270:	4649      	mov	r1, r9
 8003272:	4638      	mov	r0, r7
 8003274:	47c0      	blx	r8
 8003276:	3001      	adds	r0, #1
 8003278:	d01e      	beq.n	80032b8 <_printf_common+0xa4>
 800327a:	6823      	ldr	r3, [r4, #0]
 800327c:	68e5      	ldr	r5, [r4, #12]
 800327e:	6832      	ldr	r2, [r6, #0]
 8003280:	f003 0306 	and.w	r3, r3, #6
 8003284:	2b04      	cmp	r3, #4
 8003286:	bf08      	it	eq
 8003288:	1aad      	subeq	r5, r5, r2
 800328a:	68a3      	ldr	r3, [r4, #8]
 800328c:	6922      	ldr	r2, [r4, #16]
 800328e:	bf0c      	ite	eq
 8003290:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003294:	2500      	movne	r5, #0
 8003296:	4293      	cmp	r3, r2
 8003298:	bfc4      	itt	gt
 800329a:	1a9b      	subgt	r3, r3, r2
 800329c:	18ed      	addgt	r5, r5, r3
 800329e:	2600      	movs	r6, #0
 80032a0:	341a      	adds	r4, #26
 80032a2:	42b5      	cmp	r5, r6
 80032a4:	d11a      	bne.n	80032dc <_printf_common+0xc8>
 80032a6:	2000      	movs	r0, #0
 80032a8:	e008      	b.n	80032bc <_printf_common+0xa8>
 80032aa:	2301      	movs	r3, #1
 80032ac:	4652      	mov	r2, sl
 80032ae:	4649      	mov	r1, r9
 80032b0:	4638      	mov	r0, r7
 80032b2:	47c0      	blx	r8
 80032b4:	3001      	adds	r0, #1
 80032b6:	d103      	bne.n	80032c0 <_printf_common+0xac>
 80032b8:	f04f 30ff 	mov.w	r0, #4294967295
 80032bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80032c0:	3501      	adds	r5, #1
 80032c2:	e7c6      	b.n	8003252 <_printf_common+0x3e>
 80032c4:	18e1      	adds	r1, r4, r3
 80032c6:	1c5a      	adds	r2, r3, #1
 80032c8:	2030      	movs	r0, #48	; 0x30
 80032ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80032ce:	4422      	add	r2, r4
 80032d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80032d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80032d8:	3302      	adds	r3, #2
 80032da:	e7c7      	b.n	800326c <_printf_common+0x58>
 80032dc:	2301      	movs	r3, #1
 80032de:	4622      	mov	r2, r4
 80032e0:	4649      	mov	r1, r9
 80032e2:	4638      	mov	r0, r7
 80032e4:	47c0      	blx	r8
 80032e6:	3001      	adds	r0, #1
 80032e8:	d0e6      	beq.n	80032b8 <_printf_common+0xa4>
 80032ea:	3601      	adds	r6, #1
 80032ec:	e7d9      	b.n	80032a2 <_printf_common+0x8e>
	...

080032f0 <_printf_i>:
 80032f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80032f4:	7e0f      	ldrb	r7, [r1, #24]
 80032f6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80032f8:	2f78      	cmp	r7, #120	; 0x78
 80032fa:	4691      	mov	r9, r2
 80032fc:	4680      	mov	r8, r0
 80032fe:	460c      	mov	r4, r1
 8003300:	469a      	mov	sl, r3
 8003302:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003306:	d807      	bhi.n	8003318 <_printf_i+0x28>
 8003308:	2f62      	cmp	r7, #98	; 0x62
 800330a:	d80a      	bhi.n	8003322 <_printf_i+0x32>
 800330c:	2f00      	cmp	r7, #0
 800330e:	f000 80d8 	beq.w	80034c2 <_printf_i+0x1d2>
 8003312:	2f58      	cmp	r7, #88	; 0x58
 8003314:	f000 80a3 	beq.w	800345e <_printf_i+0x16e>
 8003318:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800331c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003320:	e03a      	b.n	8003398 <_printf_i+0xa8>
 8003322:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003326:	2b15      	cmp	r3, #21
 8003328:	d8f6      	bhi.n	8003318 <_printf_i+0x28>
 800332a:	a101      	add	r1, pc, #4	; (adr r1, 8003330 <_printf_i+0x40>)
 800332c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003330:	08003389 	.word	0x08003389
 8003334:	0800339d 	.word	0x0800339d
 8003338:	08003319 	.word	0x08003319
 800333c:	08003319 	.word	0x08003319
 8003340:	08003319 	.word	0x08003319
 8003344:	08003319 	.word	0x08003319
 8003348:	0800339d 	.word	0x0800339d
 800334c:	08003319 	.word	0x08003319
 8003350:	08003319 	.word	0x08003319
 8003354:	08003319 	.word	0x08003319
 8003358:	08003319 	.word	0x08003319
 800335c:	080034a9 	.word	0x080034a9
 8003360:	080033cd 	.word	0x080033cd
 8003364:	0800348b 	.word	0x0800348b
 8003368:	08003319 	.word	0x08003319
 800336c:	08003319 	.word	0x08003319
 8003370:	080034cb 	.word	0x080034cb
 8003374:	08003319 	.word	0x08003319
 8003378:	080033cd 	.word	0x080033cd
 800337c:	08003319 	.word	0x08003319
 8003380:	08003319 	.word	0x08003319
 8003384:	08003493 	.word	0x08003493
 8003388:	682b      	ldr	r3, [r5, #0]
 800338a:	1d1a      	adds	r2, r3, #4
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	602a      	str	r2, [r5, #0]
 8003390:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003394:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003398:	2301      	movs	r3, #1
 800339a:	e0a3      	b.n	80034e4 <_printf_i+0x1f4>
 800339c:	6820      	ldr	r0, [r4, #0]
 800339e:	6829      	ldr	r1, [r5, #0]
 80033a0:	0606      	lsls	r6, r0, #24
 80033a2:	f101 0304 	add.w	r3, r1, #4
 80033a6:	d50a      	bpl.n	80033be <_printf_i+0xce>
 80033a8:	680e      	ldr	r6, [r1, #0]
 80033aa:	602b      	str	r3, [r5, #0]
 80033ac:	2e00      	cmp	r6, #0
 80033ae:	da03      	bge.n	80033b8 <_printf_i+0xc8>
 80033b0:	232d      	movs	r3, #45	; 0x2d
 80033b2:	4276      	negs	r6, r6
 80033b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80033b8:	485e      	ldr	r0, [pc, #376]	; (8003534 <_printf_i+0x244>)
 80033ba:	230a      	movs	r3, #10
 80033bc:	e019      	b.n	80033f2 <_printf_i+0x102>
 80033be:	680e      	ldr	r6, [r1, #0]
 80033c0:	602b      	str	r3, [r5, #0]
 80033c2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80033c6:	bf18      	it	ne
 80033c8:	b236      	sxthne	r6, r6
 80033ca:	e7ef      	b.n	80033ac <_printf_i+0xbc>
 80033cc:	682b      	ldr	r3, [r5, #0]
 80033ce:	6820      	ldr	r0, [r4, #0]
 80033d0:	1d19      	adds	r1, r3, #4
 80033d2:	6029      	str	r1, [r5, #0]
 80033d4:	0601      	lsls	r1, r0, #24
 80033d6:	d501      	bpl.n	80033dc <_printf_i+0xec>
 80033d8:	681e      	ldr	r6, [r3, #0]
 80033da:	e002      	b.n	80033e2 <_printf_i+0xf2>
 80033dc:	0646      	lsls	r6, r0, #25
 80033de:	d5fb      	bpl.n	80033d8 <_printf_i+0xe8>
 80033e0:	881e      	ldrh	r6, [r3, #0]
 80033e2:	4854      	ldr	r0, [pc, #336]	; (8003534 <_printf_i+0x244>)
 80033e4:	2f6f      	cmp	r7, #111	; 0x6f
 80033e6:	bf0c      	ite	eq
 80033e8:	2308      	moveq	r3, #8
 80033ea:	230a      	movne	r3, #10
 80033ec:	2100      	movs	r1, #0
 80033ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80033f2:	6865      	ldr	r5, [r4, #4]
 80033f4:	60a5      	str	r5, [r4, #8]
 80033f6:	2d00      	cmp	r5, #0
 80033f8:	bfa2      	ittt	ge
 80033fa:	6821      	ldrge	r1, [r4, #0]
 80033fc:	f021 0104 	bicge.w	r1, r1, #4
 8003400:	6021      	strge	r1, [r4, #0]
 8003402:	b90e      	cbnz	r6, 8003408 <_printf_i+0x118>
 8003404:	2d00      	cmp	r5, #0
 8003406:	d04d      	beq.n	80034a4 <_printf_i+0x1b4>
 8003408:	4615      	mov	r5, r2
 800340a:	fbb6 f1f3 	udiv	r1, r6, r3
 800340e:	fb03 6711 	mls	r7, r3, r1, r6
 8003412:	5dc7      	ldrb	r7, [r0, r7]
 8003414:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003418:	4637      	mov	r7, r6
 800341a:	42bb      	cmp	r3, r7
 800341c:	460e      	mov	r6, r1
 800341e:	d9f4      	bls.n	800340a <_printf_i+0x11a>
 8003420:	2b08      	cmp	r3, #8
 8003422:	d10b      	bne.n	800343c <_printf_i+0x14c>
 8003424:	6823      	ldr	r3, [r4, #0]
 8003426:	07de      	lsls	r6, r3, #31
 8003428:	d508      	bpl.n	800343c <_printf_i+0x14c>
 800342a:	6923      	ldr	r3, [r4, #16]
 800342c:	6861      	ldr	r1, [r4, #4]
 800342e:	4299      	cmp	r1, r3
 8003430:	bfde      	ittt	le
 8003432:	2330      	movle	r3, #48	; 0x30
 8003434:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003438:	f105 35ff 	addle.w	r5, r5, #4294967295
 800343c:	1b52      	subs	r2, r2, r5
 800343e:	6122      	str	r2, [r4, #16]
 8003440:	f8cd a000 	str.w	sl, [sp]
 8003444:	464b      	mov	r3, r9
 8003446:	aa03      	add	r2, sp, #12
 8003448:	4621      	mov	r1, r4
 800344a:	4640      	mov	r0, r8
 800344c:	f7ff fee2 	bl	8003214 <_printf_common>
 8003450:	3001      	adds	r0, #1
 8003452:	d14c      	bne.n	80034ee <_printf_i+0x1fe>
 8003454:	f04f 30ff 	mov.w	r0, #4294967295
 8003458:	b004      	add	sp, #16
 800345a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800345e:	4835      	ldr	r0, [pc, #212]	; (8003534 <_printf_i+0x244>)
 8003460:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003464:	6829      	ldr	r1, [r5, #0]
 8003466:	6823      	ldr	r3, [r4, #0]
 8003468:	f851 6b04 	ldr.w	r6, [r1], #4
 800346c:	6029      	str	r1, [r5, #0]
 800346e:	061d      	lsls	r5, r3, #24
 8003470:	d514      	bpl.n	800349c <_printf_i+0x1ac>
 8003472:	07df      	lsls	r7, r3, #31
 8003474:	bf44      	itt	mi
 8003476:	f043 0320 	orrmi.w	r3, r3, #32
 800347a:	6023      	strmi	r3, [r4, #0]
 800347c:	b91e      	cbnz	r6, 8003486 <_printf_i+0x196>
 800347e:	6823      	ldr	r3, [r4, #0]
 8003480:	f023 0320 	bic.w	r3, r3, #32
 8003484:	6023      	str	r3, [r4, #0]
 8003486:	2310      	movs	r3, #16
 8003488:	e7b0      	b.n	80033ec <_printf_i+0xfc>
 800348a:	6823      	ldr	r3, [r4, #0]
 800348c:	f043 0320 	orr.w	r3, r3, #32
 8003490:	6023      	str	r3, [r4, #0]
 8003492:	2378      	movs	r3, #120	; 0x78
 8003494:	4828      	ldr	r0, [pc, #160]	; (8003538 <_printf_i+0x248>)
 8003496:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800349a:	e7e3      	b.n	8003464 <_printf_i+0x174>
 800349c:	0659      	lsls	r1, r3, #25
 800349e:	bf48      	it	mi
 80034a0:	b2b6      	uxthmi	r6, r6
 80034a2:	e7e6      	b.n	8003472 <_printf_i+0x182>
 80034a4:	4615      	mov	r5, r2
 80034a6:	e7bb      	b.n	8003420 <_printf_i+0x130>
 80034a8:	682b      	ldr	r3, [r5, #0]
 80034aa:	6826      	ldr	r6, [r4, #0]
 80034ac:	6961      	ldr	r1, [r4, #20]
 80034ae:	1d18      	adds	r0, r3, #4
 80034b0:	6028      	str	r0, [r5, #0]
 80034b2:	0635      	lsls	r5, r6, #24
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	d501      	bpl.n	80034bc <_printf_i+0x1cc>
 80034b8:	6019      	str	r1, [r3, #0]
 80034ba:	e002      	b.n	80034c2 <_printf_i+0x1d2>
 80034bc:	0670      	lsls	r0, r6, #25
 80034be:	d5fb      	bpl.n	80034b8 <_printf_i+0x1c8>
 80034c0:	8019      	strh	r1, [r3, #0]
 80034c2:	2300      	movs	r3, #0
 80034c4:	6123      	str	r3, [r4, #16]
 80034c6:	4615      	mov	r5, r2
 80034c8:	e7ba      	b.n	8003440 <_printf_i+0x150>
 80034ca:	682b      	ldr	r3, [r5, #0]
 80034cc:	1d1a      	adds	r2, r3, #4
 80034ce:	602a      	str	r2, [r5, #0]
 80034d0:	681d      	ldr	r5, [r3, #0]
 80034d2:	6862      	ldr	r2, [r4, #4]
 80034d4:	2100      	movs	r1, #0
 80034d6:	4628      	mov	r0, r5
 80034d8:	f7fc fe9a 	bl	8000210 <memchr>
 80034dc:	b108      	cbz	r0, 80034e2 <_printf_i+0x1f2>
 80034de:	1b40      	subs	r0, r0, r5
 80034e0:	6060      	str	r0, [r4, #4]
 80034e2:	6863      	ldr	r3, [r4, #4]
 80034e4:	6123      	str	r3, [r4, #16]
 80034e6:	2300      	movs	r3, #0
 80034e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80034ec:	e7a8      	b.n	8003440 <_printf_i+0x150>
 80034ee:	6923      	ldr	r3, [r4, #16]
 80034f0:	462a      	mov	r2, r5
 80034f2:	4649      	mov	r1, r9
 80034f4:	4640      	mov	r0, r8
 80034f6:	47d0      	blx	sl
 80034f8:	3001      	adds	r0, #1
 80034fa:	d0ab      	beq.n	8003454 <_printf_i+0x164>
 80034fc:	6823      	ldr	r3, [r4, #0]
 80034fe:	079b      	lsls	r3, r3, #30
 8003500:	d413      	bmi.n	800352a <_printf_i+0x23a>
 8003502:	68e0      	ldr	r0, [r4, #12]
 8003504:	9b03      	ldr	r3, [sp, #12]
 8003506:	4298      	cmp	r0, r3
 8003508:	bfb8      	it	lt
 800350a:	4618      	movlt	r0, r3
 800350c:	e7a4      	b.n	8003458 <_printf_i+0x168>
 800350e:	2301      	movs	r3, #1
 8003510:	4632      	mov	r2, r6
 8003512:	4649      	mov	r1, r9
 8003514:	4640      	mov	r0, r8
 8003516:	47d0      	blx	sl
 8003518:	3001      	adds	r0, #1
 800351a:	d09b      	beq.n	8003454 <_printf_i+0x164>
 800351c:	3501      	adds	r5, #1
 800351e:	68e3      	ldr	r3, [r4, #12]
 8003520:	9903      	ldr	r1, [sp, #12]
 8003522:	1a5b      	subs	r3, r3, r1
 8003524:	42ab      	cmp	r3, r5
 8003526:	dcf2      	bgt.n	800350e <_printf_i+0x21e>
 8003528:	e7eb      	b.n	8003502 <_printf_i+0x212>
 800352a:	2500      	movs	r5, #0
 800352c:	f104 0619 	add.w	r6, r4, #25
 8003530:	e7f5      	b.n	800351e <_printf_i+0x22e>
 8003532:	bf00      	nop
 8003534:	08003855 	.word	0x08003855
 8003538:	08003866 	.word	0x08003866

0800353c <memcpy>:
 800353c:	440a      	add	r2, r1
 800353e:	4291      	cmp	r1, r2
 8003540:	f100 33ff 	add.w	r3, r0, #4294967295
 8003544:	d100      	bne.n	8003548 <memcpy+0xc>
 8003546:	4770      	bx	lr
 8003548:	b510      	push	{r4, lr}
 800354a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800354e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003552:	4291      	cmp	r1, r2
 8003554:	d1f9      	bne.n	800354a <memcpy+0xe>
 8003556:	bd10      	pop	{r4, pc}

08003558 <memmove>:
 8003558:	4288      	cmp	r0, r1
 800355a:	b510      	push	{r4, lr}
 800355c:	eb01 0402 	add.w	r4, r1, r2
 8003560:	d902      	bls.n	8003568 <memmove+0x10>
 8003562:	4284      	cmp	r4, r0
 8003564:	4623      	mov	r3, r4
 8003566:	d807      	bhi.n	8003578 <memmove+0x20>
 8003568:	1e43      	subs	r3, r0, #1
 800356a:	42a1      	cmp	r1, r4
 800356c:	d008      	beq.n	8003580 <memmove+0x28>
 800356e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003572:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003576:	e7f8      	b.n	800356a <memmove+0x12>
 8003578:	4402      	add	r2, r0
 800357a:	4601      	mov	r1, r0
 800357c:	428a      	cmp	r2, r1
 800357e:	d100      	bne.n	8003582 <memmove+0x2a>
 8003580:	bd10      	pop	{r4, pc}
 8003582:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003586:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800358a:	e7f7      	b.n	800357c <memmove+0x24>

0800358c <_free_r>:
 800358c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800358e:	2900      	cmp	r1, #0
 8003590:	d044      	beq.n	800361c <_free_r+0x90>
 8003592:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003596:	9001      	str	r0, [sp, #4]
 8003598:	2b00      	cmp	r3, #0
 800359a:	f1a1 0404 	sub.w	r4, r1, #4
 800359e:	bfb8      	it	lt
 80035a0:	18e4      	addlt	r4, r4, r3
 80035a2:	f000 f913 	bl	80037cc <__malloc_lock>
 80035a6:	4a1e      	ldr	r2, [pc, #120]	; (8003620 <_free_r+0x94>)
 80035a8:	9801      	ldr	r0, [sp, #4]
 80035aa:	6813      	ldr	r3, [r2, #0]
 80035ac:	b933      	cbnz	r3, 80035bc <_free_r+0x30>
 80035ae:	6063      	str	r3, [r4, #4]
 80035b0:	6014      	str	r4, [r2, #0]
 80035b2:	b003      	add	sp, #12
 80035b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80035b8:	f000 b90e 	b.w	80037d8 <__malloc_unlock>
 80035bc:	42a3      	cmp	r3, r4
 80035be:	d908      	bls.n	80035d2 <_free_r+0x46>
 80035c0:	6825      	ldr	r5, [r4, #0]
 80035c2:	1961      	adds	r1, r4, r5
 80035c4:	428b      	cmp	r3, r1
 80035c6:	bf01      	itttt	eq
 80035c8:	6819      	ldreq	r1, [r3, #0]
 80035ca:	685b      	ldreq	r3, [r3, #4]
 80035cc:	1949      	addeq	r1, r1, r5
 80035ce:	6021      	streq	r1, [r4, #0]
 80035d0:	e7ed      	b.n	80035ae <_free_r+0x22>
 80035d2:	461a      	mov	r2, r3
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	b10b      	cbz	r3, 80035dc <_free_r+0x50>
 80035d8:	42a3      	cmp	r3, r4
 80035da:	d9fa      	bls.n	80035d2 <_free_r+0x46>
 80035dc:	6811      	ldr	r1, [r2, #0]
 80035de:	1855      	adds	r5, r2, r1
 80035e0:	42a5      	cmp	r5, r4
 80035e2:	d10b      	bne.n	80035fc <_free_r+0x70>
 80035e4:	6824      	ldr	r4, [r4, #0]
 80035e6:	4421      	add	r1, r4
 80035e8:	1854      	adds	r4, r2, r1
 80035ea:	42a3      	cmp	r3, r4
 80035ec:	6011      	str	r1, [r2, #0]
 80035ee:	d1e0      	bne.n	80035b2 <_free_r+0x26>
 80035f0:	681c      	ldr	r4, [r3, #0]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	6053      	str	r3, [r2, #4]
 80035f6:	4421      	add	r1, r4
 80035f8:	6011      	str	r1, [r2, #0]
 80035fa:	e7da      	b.n	80035b2 <_free_r+0x26>
 80035fc:	d902      	bls.n	8003604 <_free_r+0x78>
 80035fe:	230c      	movs	r3, #12
 8003600:	6003      	str	r3, [r0, #0]
 8003602:	e7d6      	b.n	80035b2 <_free_r+0x26>
 8003604:	6825      	ldr	r5, [r4, #0]
 8003606:	1961      	adds	r1, r4, r5
 8003608:	428b      	cmp	r3, r1
 800360a:	bf04      	itt	eq
 800360c:	6819      	ldreq	r1, [r3, #0]
 800360e:	685b      	ldreq	r3, [r3, #4]
 8003610:	6063      	str	r3, [r4, #4]
 8003612:	bf04      	itt	eq
 8003614:	1949      	addeq	r1, r1, r5
 8003616:	6021      	streq	r1, [r4, #0]
 8003618:	6054      	str	r4, [r2, #4]
 800361a:	e7ca      	b.n	80035b2 <_free_r+0x26>
 800361c:	b003      	add	sp, #12
 800361e:	bd30      	pop	{r4, r5, pc}
 8003620:	20000130 	.word	0x20000130

08003624 <sbrk_aligned>:
 8003624:	b570      	push	{r4, r5, r6, lr}
 8003626:	4e0e      	ldr	r6, [pc, #56]	; (8003660 <sbrk_aligned+0x3c>)
 8003628:	460c      	mov	r4, r1
 800362a:	6831      	ldr	r1, [r6, #0]
 800362c:	4605      	mov	r5, r0
 800362e:	b911      	cbnz	r1, 8003636 <sbrk_aligned+0x12>
 8003630:	f000 f8bc 	bl	80037ac <_sbrk_r>
 8003634:	6030      	str	r0, [r6, #0]
 8003636:	4621      	mov	r1, r4
 8003638:	4628      	mov	r0, r5
 800363a:	f000 f8b7 	bl	80037ac <_sbrk_r>
 800363e:	1c43      	adds	r3, r0, #1
 8003640:	d00a      	beq.n	8003658 <sbrk_aligned+0x34>
 8003642:	1cc4      	adds	r4, r0, #3
 8003644:	f024 0403 	bic.w	r4, r4, #3
 8003648:	42a0      	cmp	r0, r4
 800364a:	d007      	beq.n	800365c <sbrk_aligned+0x38>
 800364c:	1a21      	subs	r1, r4, r0
 800364e:	4628      	mov	r0, r5
 8003650:	f000 f8ac 	bl	80037ac <_sbrk_r>
 8003654:	3001      	adds	r0, #1
 8003656:	d101      	bne.n	800365c <sbrk_aligned+0x38>
 8003658:	f04f 34ff 	mov.w	r4, #4294967295
 800365c:	4620      	mov	r0, r4
 800365e:	bd70      	pop	{r4, r5, r6, pc}
 8003660:	20000134 	.word	0x20000134

08003664 <_malloc_r>:
 8003664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003668:	1ccd      	adds	r5, r1, #3
 800366a:	f025 0503 	bic.w	r5, r5, #3
 800366e:	3508      	adds	r5, #8
 8003670:	2d0c      	cmp	r5, #12
 8003672:	bf38      	it	cc
 8003674:	250c      	movcc	r5, #12
 8003676:	2d00      	cmp	r5, #0
 8003678:	4607      	mov	r7, r0
 800367a:	db01      	blt.n	8003680 <_malloc_r+0x1c>
 800367c:	42a9      	cmp	r1, r5
 800367e:	d905      	bls.n	800368c <_malloc_r+0x28>
 8003680:	230c      	movs	r3, #12
 8003682:	603b      	str	r3, [r7, #0]
 8003684:	2600      	movs	r6, #0
 8003686:	4630      	mov	r0, r6
 8003688:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800368c:	4e2e      	ldr	r6, [pc, #184]	; (8003748 <_malloc_r+0xe4>)
 800368e:	f000 f89d 	bl	80037cc <__malloc_lock>
 8003692:	6833      	ldr	r3, [r6, #0]
 8003694:	461c      	mov	r4, r3
 8003696:	bb34      	cbnz	r4, 80036e6 <_malloc_r+0x82>
 8003698:	4629      	mov	r1, r5
 800369a:	4638      	mov	r0, r7
 800369c:	f7ff ffc2 	bl	8003624 <sbrk_aligned>
 80036a0:	1c43      	adds	r3, r0, #1
 80036a2:	4604      	mov	r4, r0
 80036a4:	d14d      	bne.n	8003742 <_malloc_r+0xde>
 80036a6:	6834      	ldr	r4, [r6, #0]
 80036a8:	4626      	mov	r6, r4
 80036aa:	2e00      	cmp	r6, #0
 80036ac:	d140      	bne.n	8003730 <_malloc_r+0xcc>
 80036ae:	6823      	ldr	r3, [r4, #0]
 80036b0:	4631      	mov	r1, r6
 80036b2:	4638      	mov	r0, r7
 80036b4:	eb04 0803 	add.w	r8, r4, r3
 80036b8:	f000 f878 	bl	80037ac <_sbrk_r>
 80036bc:	4580      	cmp	r8, r0
 80036be:	d13a      	bne.n	8003736 <_malloc_r+0xd2>
 80036c0:	6821      	ldr	r1, [r4, #0]
 80036c2:	3503      	adds	r5, #3
 80036c4:	1a6d      	subs	r5, r5, r1
 80036c6:	f025 0503 	bic.w	r5, r5, #3
 80036ca:	3508      	adds	r5, #8
 80036cc:	2d0c      	cmp	r5, #12
 80036ce:	bf38      	it	cc
 80036d0:	250c      	movcc	r5, #12
 80036d2:	4629      	mov	r1, r5
 80036d4:	4638      	mov	r0, r7
 80036d6:	f7ff ffa5 	bl	8003624 <sbrk_aligned>
 80036da:	3001      	adds	r0, #1
 80036dc:	d02b      	beq.n	8003736 <_malloc_r+0xd2>
 80036de:	6823      	ldr	r3, [r4, #0]
 80036e0:	442b      	add	r3, r5
 80036e2:	6023      	str	r3, [r4, #0]
 80036e4:	e00e      	b.n	8003704 <_malloc_r+0xa0>
 80036e6:	6822      	ldr	r2, [r4, #0]
 80036e8:	1b52      	subs	r2, r2, r5
 80036ea:	d41e      	bmi.n	800372a <_malloc_r+0xc6>
 80036ec:	2a0b      	cmp	r2, #11
 80036ee:	d916      	bls.n	800371e <_malloc_r+0xba>
 80036f0:	1961      	adds	r1, r4, r5
 80036f2:	42a3      	cmp	r3, r4
 80036f4:	6025      	str	r5, [r4, #0]
 80036f6:	bf18      	it	ne
 80036f8:	6059      	strne	r1, [r3, #4]
 80036fa:	6863      	ldr	r3, [r4, #4]
 80036fc:	bf08      	it	eq
 80036fe:	6031      	streq	r1, [r6, #0]
 8003700:	5162      	str	r2, [r4, r5]
 8003702:	604b      	str	r3, [r1, #4]
 8003704:	4638      	mov	r0, r7
 8003706:	f104 060b 	add.w	r6, r4, #11
 800370a:	f000 f865 	bl	80037d8 <__malloc_unlock>
 800370e:	f026 0607 	bic.w	r6, r6, #7
 8003712:	1d23      	adds	r3, r4, #4
 8003714:	1af2      	subs	r2, r6, r3
 8003716:	d0b6      	beq.n	8003686 <_malloc_r+0x22>
 8003718:	1b9b      	subs	r3, r3, r6
 800371a:	50a3      	str	r3, [r4, r2]
 800371c:	e7b3      	b.n	8003686 <_malloc_r+0x22>
 800371e:	6862      	ldr	r2, [r4, #4]
 8003720:	42a3      	cmp	r3, r4
 8003722:	bf0c      	ite	eq
 8003724:	6032      	streq	r2, [r6, #0]
 8003726:	605a      	strne	r2, [r3, #4]
 8003728:	e7ec      	b.n	8003704 <_malloc_r+0xa0>
 800372a:	4623      	mov	r3, r4
 800372c:	6864      	ldr	r4, [r4, #4]
 800372e:	e7b2      	b.n	8003696 <_malloc_r+0x32>
 8003730:	4634      	mov	r4, r6
 8003732:	6876      	ldr	r6, [r6, #4]
 8003734:	e7b9      	b.n	80036aa <_malloc_r+0x46>
 8003736:	230c      	movs	r3, #12
 8003738:	603b      	str	r3, [r7, #0]
 800373a:	4638      	mov	r0, r7
 800373c:	f000 f84c 	bl	80037d8 <__malloc_unlock>
 8003740:	e7a1      	b.n	8003686 <_malloc_r+0x22>
 8003742:	6025      	str	r5, [r4, #0]
 8003744:	e7de      	b.n	8003704 <_malloc_r+0xa0>
 8003746:	bf00      	nop
 8003748:	20000130 	.word	0x20000130

0800374c <_realloc_r>:
 800374c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003750:	4680      	mov	r8, r0
 8003752:	4614      	mov	r4, r2
 8003754:	460e      	mov	r6, r1
 8003756:	b921      	cbnz	r1, 8003762 <_realloc_r+0x16>
 8003758:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800375c:	4611      	mov	r1, r2
 800375e:	f7ff bf81 	b.w	8003664 <_malloc_r>
 8003762:	b92a      	cbnz	r2, 8003770 <_realloc_r+0x24>
 8003764:	f7ff ff12 	bl	800358c <_free_r>
 8003768:	4625      	mov	r5, r4
 800376a:	4628      	mov	r0, r5
 800376c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003770:	f000 f838 	bl	80037e4 <_malloc_usable_size_r>
 8003774:	4284      	cmp	r4, r0
 8003776:	4607      	mov	r7, r0
 8003778:	d802      	bhi.n	8003780 <_realloc_r+0x34>
 800377a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800377e:	d812      	bhi.n	80037a6 <_realloc_r+0x5a>
 8003780:	4621      	mov	r1, r4
 8003782:	4640      	mov	r0, r8
 8003784:	f7ff ff6e 	bl	8003664 <_malloc_r>
 8003788:	4605      	mov	r5, r0
 800378a:	2800      	cmp	r0, #0
 800378c:	d0ed      	beq.n	800376a <_realloc_r+0x1e>
 800378e:	42bc      	cmp	r4, r7
 8003790:	4622      	mov	r2, r4
 8003792:	4631      	mov	r1, r6
 8003794:	bf28      	it	cs
 8003796:	463a      	movcs	r2, r7
 8003798:	f7ff fed0 	bl	800353c <memcpy>
 800379c:	4631      	mov	r1, r6
 800379e:	4640      	mov	r0, r8
 80037a0:	f7ff fef4 	bl	800358c <_free_r>
 80037a4:	e7e1      	b.n	800376a <_realloc_r+0x1e>
 80037a6:	4635      	mov	r5, r6
 80037a8:	e7df      	b.n	800376a <_realloc_r+0x1e>
	...

080037ac <_sbrk_r>:
 80037ac:	b538      	push	{r3, r4, r5, lr}
 80037ae:	4d06      	ldr	r5, [pc, #24]	; (80037c8 <_sbrk_r+0x1c>)
 80037b0:	2300      	movs	r3, #0
 80037b2:	4604      	mov	r4, r0
 80037b4:	4608      	mov	r0, r1
 80037b6:	602b      	str	r3, [r5, #0]
 80037b8:	f7fd f93a 	bl	8000a30 <_sbrk>
 80037bc:	1c43      	adds	r3, r0, #1
 80037be:	d102      	bne.n	80037c6 <_sbrk_r+0x1a>
 80037c0:	682b      	ldr	r3, [r5, #0]
 80037c2:	b103      	cbz	r3, 80037c6 <_sbrk_r+0x1a>
 80037c4:	6023      	str	r3, [r4, #0]
 80037c6:	bd38      	pop	{r3, r4, r5, pc}
 80037c8:	20000138 	.word	0x20000138

080037cc <__malloc_lock>:
 80037cc:	4801      	ldr	r0, [pc, #4]	; (80037d4 <__malloc_lock+0x8>)
 80037ce:	f000 b811 	b.w	80037f4 <__retarget_lock_acquire_recursive>
 80037d2:	bf00      	nop
 80037d4:	2000013c 	.word	0x2000013c

080037d8 <__malloc_unlock>:
 80037d8:	4801      	ldr	r0, [pc, #4]	; (80037e0 <__malloc_unlock+0x8>)
 80037da:	f000 b80c 	b.w	80037f6 <__retarget_lock_release_recursive>
 80037de:	bf00      	nop
 80037e0:	2000013c 	.word	0x2000013c

080037e4 <_malloc_usable_size_r>:
 80037e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80037e8:	1f18      	subs	r0, r3, #4
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	bfbc      	itt	lt
 80037ee:	580b      	ldrlt	r3, [r1, r0]
 80037f0:	18c0      	addlt	r0, r0, r3
 80037f2:	4770      	bx	lr

080037f4 <__retarget_lock_acquire_recursive>:
 80037f4:	4770      	bx	lr

080037f6 <__retarget_lock_release_recursive>:
 80037f6:	4770      	bx	lr

080037f8 <_init>:
 80037f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037fa:	bf00      	nop
 80037fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037fe:	bc08      	pop	{r3}
 8003800:	469e      	mov	lr, r3
 8003802:	4770      	bx	lr

08003804 <_fini>:
 8003804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003806:	bf00      	nop
 8003808:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800380a:	bc08      	pop	{r3}
 800380c:	469e      	mov	lr, r3
 800380e:	4770      	bx	lr
